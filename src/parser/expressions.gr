//
//  expressions.gr
//  CARM-Compiler
//
//  Created by Ollie Ford on 01/03/2015.
//  Copyright (c) 2015 OJFord. All rights reserved.
//

primary_expr:
	IDENTIFIER
|
	constant
|
	string_literal
|
	LBRACKET expr RBRACKET
;

postfix_expr:
	primary_expr
|
	postfix_expr LSQUBRACKET expr RSQUBRACKET
|
	postfix_expr LBRACKET RBRACKET
|
	postfix_expr LBRACKET arg_expr_list RBRACKET
|
	postfix_expr OPERATOR_DOT IDENTIFIER
|
	postfix_expr OPERATOR_PTR IDENTIFIER
|
	postfix_expr OPERATOR_INCR
|
	postfix_expr OPERATOR_DECR
;

arg_expr_list:
	assignment_expr
|
	arg_expr_list COMMA assignment_expr
;

unary_expr:
	postfix_expr
|
	OPERATOR_INCR unary_expr						%prec PREINCR
|
	OPERATOR_DECR unary_expr						%prec PREDECR
|
	unary_operation cast_expr
|
	KW_SIZEOF unary_expr
|
	KW_SIZEOF LBRACKET type_name RBRACKET
;

unary_operation:
	OPERATOR_BITAND									%prec ADDR
|
	OPERATOR_MULT									%prec DEREF
|
	OPERATOR_PLUS									%prec UPLUS
|
	OPERATOR_MINUS									%prec UMINUS
|
	OPERATOR_BITNEG
|
	OPERATOR_BOOLNEG
;

cast_expr:
	unary_expr
|
	LBRACKET type_name RBRACKET cast_expr			%prec CAST
;

multiplicative_expr:
	cast_expr
|
	multiplicative_expr OPERATOR_MULT cast_expr
|
	multiplicative_expr OPERATOR_DIV cast_expr
|
	multiplicative_expr OPERATOR_MOD cast_expr
;

additive_expr:
	multiplicative_expr
|
	additive_expr OPERATOR_PLUS multiplicative_expr
|
	additive_expr OPERATOR_MINUS multiplicative_expr
;

shift_expr:
	additive_expr
|
	shift_expr OPERATOR_BSL additive_expr
|
	shift_expr OPERATOR_BSR additive_expr
;

relational_expr:
	shift_expr
|
	relational_expr OPERATOR_LT shift_expr
|
	relational_expr OPERATOR_GT shift_expr
|
	relational_expr OPERATOR_LTEQU shift_expr
|
	relational_expr OPERATOR_GTEQU shift_expr
;

equality_expr:
	relational_expr
|
	equality_expr OPERATOR_EQUALITY relational_expr
|
	equality_expr OPERATOR_NEQU relational_expr
;

and_expr:
	equality_expr
|
	and_expr OPERATOR_BITAND equality_expr
;

xor_expr:
	and_expr
|
	xor_expr OPERATOR_BITXOR and_expr
;

or_expr:
	xor_expr
|
	or_expr OPERATOR_BITOR xor_expr
;

logical_and_expr:
	or_expr
|
	logical_and_expr OPERATOR_BOOLAND or_expr
;

logical_or_expr:
	logical_and_expr
|
	logical_or_expr OPERATOR_BOOLOR logical_and_expr
;

conditional_expr:
	logical_or_expr
|
	logical_or_expr OPERATOR_TERNARY expr COLON conditional_expr
;

assignment_expr:
	conditional_expr
|
	unary_expr assignment_operator assignment_expr
;

assignment_operator:
	EQUALS
|
	OPERATOR_MULTEQU
|
	OPERATOR_DIVEQU
|
	OPERATOR_MODEQU
|
	OPERATOR_PLUSEQU
|
	OPERATOR_MINUSEQU
|
	OPERATOR_BSLEQU
|
	OPERATOR_BSREQU
|
	OPERATOR_ANDEQU
|
	OPERATOR_XOREQU
|
	OPERATOR_OREQU
;

expr:
	assignment_expr
|
	expr COMMA assignment_expr
;

constant_expr:
	conditional_expr
;
