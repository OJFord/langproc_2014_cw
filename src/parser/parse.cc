// Generated by Bisonc++ V4.01.00 on Thu, 05 Mar 2015 16:51:02 +0000

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {345, 1}, // 1: keyword (KW_AUTO) ->  KW_AUTO
     {345, 1}, // 2: keyword (KW_DOUBLE) ->  KW_DOUBLE
     {345, 1}, // 3: keyword (KW_INT) ->  KW_INT
     {345, 1}, // 4: keyword (KW_STRUCT) ->  KW_STRUCT
     {345, 1}, // 5: keyword (KW_BREAK) ->  KW_BREAK
     {345, 1}, // 6: keyword (KW_ELSE) ->  KW_ELSE
     {345, 1}, // 7: keyword (KW_LONG) ->  KW_LONG
     {345, 1}, // 8: keyword (KW_SWITCH) ->  KW_SWITCH
     {345, 1}, // 9: keyword (KW_CASE) ->  KW_CASE
     {345, 1}, // 10: keyword (KW_ENUM) ->  KW_ENUM
     {345, 1}, // 11: keyword (KW_REGISTER) ->  KW_REGISTER
     {345, 1}, // 12: keyword (KW_TYPEDEF) ->  KW_TYPEDEF
     {345, 1}, // 13: keyword (KW_CHAR) ->  KW_CHAR
     {345, 1}, // 14: keyword (KW_EXTERN) ->  KW_EXTERN
     {345, 1}, // 15: keyword (KW_RETURN) ->  KW_RETURN
     {345, 1}, // 16: keyword (KW_UNION) ->  KW_UNION
     {345, 1}, // 17: keyword (KW_CONST) ->  KW_CONST
     {345, 1}, // 18: keyword (KW_FLOAT) ->  KW_FLOAT
     {345, 1}, // 19: keyword (KW_SHORT) ->  KW_SHORT
     {345, 1}, // 20: keyword (KW_UNSIGNED) ->  KW_UNSIGNED
     {345, 1}, // 21: keyword (KW_CONTINUE) ->  KW_CONTINUE
     {345, 1}, // 22: keyword (KW_FOR) ->  KW_FOR
     {345, 1}, // 23: keyword (KW_SIGNED) ->  KW_SIGNED
     {345, 1}, // 24: keyword (KW_VOID) ->  KW_VOID
     {345, 1}, // 25: keyword (KW_DEFAULT) ->  KW_DEFAULT
     {345, 1}, // 26: keyword (KW_GOTO) ->  KW_GOTO
     {345, 1}, // 27: keyword (KW_SIZEOF) ->  KW_SIZEOF
     {345, 1}, // 28: keyword (KW_VOLATILE) ->  KW_VOLATILE
     {345, 1}, // 29: keyword (KW_DO) ->  KW_DO
     {345, 1}, // 30: keyword (KW_IF) ->  KW_IF
     {345, 1}, // 31: keyword (KW_STATIC) ->  KW_STATIC
     {345, 1}, // 32: keyword (KW_WHILE) ->  KW_WHILE
     {346, 1}, // 33: constant ->  floating_constant
     {346, 1}, // 34: constant ->  integer_constant
     {346, 1}, // 35: constant ->  enumeration_constant
     {346, 1}, // 36: constant ->  character_constant
     {347, 1}, // 37: floating_constant (FLOATCONSTANT) ->  FLOATCONSTANT
     {348, 1}, // 38: integer_constant (DECCONSTANT) ->  DECCONSTANT
     {348, 1}, // 39: integer_constant (OCTCONSTANT) ->  OCTCONSTANT
     {348, 1}, // 40: integer_constant (HEXCONSTANT) ->  HEXCONSTANT
     {349, 1}, // 41: enumeration_constant (IDENTIFIER) ->  IDENTIFIER
     {350, 1}, // 42: character_constant (CHARCONSTANT) ->  CHARCONSTANT
     {350, 1}, // 43: character_constant (WCHARCONSTANT) ->  WCHARCONSTANT
     {351, 1}, // 44: string_literal (STRINGLITERAL) ->  STRINGLITERAL
     {351, 1}, // 45: string_literal (WSTRINGLITERAL) ->  WSTRINGLITERAL
     {352, 1}, // 46: primary_expr (IDENTIFIER) ->  IDENTIFIER
     {352, 1}, // 47: primary_expr ->  constant
     {352, 1}, // 48: primary_expr ->  string_literal
     {352, 3}, // 49: primary_expr (LBRACKET) ->  LBRACKET expr RBRACKET
     {354, 1}, // 50: postfix_expr ->  primary_expr
     {354, 4}, // 51: postfix_expr (LSQUBRACKET) ->  postfix_expr LSQUBRACKET expr RSQUBRACKET
     {354, 3}, // 52: postfix_expr (LBRACKET) ->  postfix_expr LBRACKET RBRACKET
     {354, 4}, // 53: postfix_expr (LBRACKET) ->  postfix_expr LBRACKET arg_expr_list RBRACKET
     {354, 3}, // 54: postfix_expr (OPERATOR_DOT) ->  postfix_expr OPERATOR_DOT IDENTIFIER
     {354, 3}, // 55: postfix_expr (OPERATOR_PTR) ->  postfix_expr OPERATOR_PTR IDENTIFIER
     {354, 2}, // 56: postfix_expr (OPERATOR_INCR) ->  postfix_expr OPERATOR_INCR
     {354, 2}, // 57: postfix_expr (OPERATOR_DECR) ->  postfix_expr OPERATOR_DECR
     {355, 1}, // 58: arg_expr_list ->  assignment_expr
     {355, 3}, // 59: arg_expr_list (COMMA) ->  arg_expr_list COMMA assignment_expr
     {357, 1}, // 60: unary_expr ->  postfix_expr
     {357, 2}, // 61: unary_expr (OPERATOR_INCR) ->  OPERATOR_INCR unary_expr
     {357, 2}, // 62: unary_expr (OPERATOR_DECR) ->  OPERATOR_DECR unary_expr
     {357, 2}, // 63: unary_expr ->  unary_operation cast_expr
     {357, 2}, // 64: unary_expr (KW_SIZEOF) ->  KW_SIZEOF unary_expr
     {357, 4}, // 65: unary_expr (KW_SIZEOF) ->  KW_SIZEOF LBRACKET type_name RBRACKET
     {358, 1}, // 66: unary_operation (OPERATOR_BITAND) ->  OPERATOR_BITAND
     {358, 1}, // 67: unary_operation (ASTERISK) ->  ASTERISK
     {358, 1}, // 68: unary_operation (OPERATOR_PLUS) ->  OPERATOR_PLUS
     {358, 1}, // 69: unary_operation (OPERATOR_MINUS) ->  OPERATOR_MINUS
     {358, 1}, // 70: unary_operation (OPERATOR_BITNEG) ->  OPERATOR_BITNEG
     {358, 1}, // 71: unary_operation (OPERATOR_BOOLNEG) ->  OPERATOR_BOOLNEG
     {359, 1}, // 72: cast_expr ->  unary_expr
     {359, 4}, // 73: cast_expr (LBRACKET) ->  LBRACKET type_name RBRACKET cast_expr
     {361, 1}, // 74: multiplicative_expr ->  cast_expr
     {361, 3}, // 75: multiplicative_expr (ASTERISK) ->  multiplicative_expr ASTERISK cast_expr
     {361, 3}, // 76: multiplicative_expr (OPERATOR_DIV) ->  multiplicative_expr OPERATOR_DIV cast_expr
     {361, 3}, // 77: multiplicative_expr (OPERATOR_MOD) ->  multiplicative_expr OPERATOR_MOD cast_expr
     {362, 1}, // 78: additive_expr ->  multiplicative_expr
     {362, 3}, // 79: additive_expr (OPERATOR_PLUS) ->  additive_expr OPERATOR_PLUS multiplicative_expr
     {362, 3}, // 80: additive_expr (OPERATOR_MINUS) ->  additive_expr OPERATOR_MINUS multiplicative_expr
     {363, 1}, // 81: shift_expr ->  additive_expr
     {363, 3}, // 82: shift_expr (OPERATOR_BSL) ->  shift_expr OPERATOR_BSL additive_expr
     {363, 3}, // 83: shift_expr (OPERATOR_BSR) ->  shift_expr OPERATOR_BSR additive_expr
     {364, 1}, // 84: relational_expr ->  shift_expr
     {364, 3}, // 85: relational_expr (OPERATOR_LT) ->  relational_expr OPERATOR_LT shift_expr
     {364, 3}, // 86: relational_expr (OPERATOR_GT) ->  relational_expr OPERATOR_GT shift_expr
     {364, 3}, // 87: relational_expr (OPERATOR_LTEQU) ->  relational_expr OPERATOR_LTEQU shift_expr
     {364, 3}, // 88: relational_expr (OPERATOR_GTEQU) ->  relational_expr OPERATOR_GTEQU shift_expr
     {365, 1}, // 89: equality_expr ->  relational_expr
     {365, 3}, // 90: equality_expr (OPERATOR_EQUALITY) ->  equality_expr OPERATOR_EQUALITY relational_expr
     {365, 3}, // 91: equality_expr (OPERATOR_NEQU) ->  equality_expr OPERATOR_NEQU relational_expr
     {366, 1}, // 92: and_expr ->  equality_expr
     {366, 3}, // 93: and_expr (OPERATOR_BITAND) ->  and_expr OPERATOR_BITAND equality_expr
     {367, 1}, // 94: xor_expr ->  and_expr
     {367, 3}, // 95: xor_expr (OPERATOR_BITXOR) ->  xor_expr OPERATOR_BITXOR and_expr
     {368, 1}, // 96: or_expr ->  xor_expr
     {368, 3}, // 97: or_expr (OPERATOR_BITOR) ->  or_expr OPERATOR_BITOR xor_expr
     {369, 1}, // 98: logical_and_expr ->  or_expr
     {369, 3}, // 99: logical_and_expr (OPERATOR_BOOLAND) ->  logical_and_expr OPERATOR_BOOLAND or_expr
     {370, 1}, // 100: logical_or_expr ->  logical_and_expr
     {370, 3}, // 101: logical_or_expr (OPERATOR_BOOLOR) ->  logical_or_expr OPERATOR_BOOLOR logical_and_expr
     {371, 1}, // 102: conditional_expr ->  logical_or_expr
     {371, 5}, // 103: conditional_expr (OPERATOR_TERNARY) ->  logical_or_expr OPERATOR_TERNARY expr COLON conditional_expr
     {356, 1}, // 104: assignment_expr ->  conditional_expr
     {356, 3}, // 105: assignment_expr ->  unary_expr assignment_operator assignment_expr
     {372, 1}, // 106: assignment_operator (EQUALS) ->  EQUALS
     {372, 1}, // 107: assignment_operator (OPERATOR_MULTEQU) ->  OPERATOR_MULTEQU
     {372, 1}, // 108: assignment_operator (OPERATOR_DIVEQU) ->  OPERATOR_DIVEQU
     {372, 1}, // 109: assignment_operator (OPERATOR_MODEQU) ->  OPERATOR_MODEQU
     {372, 1}, // 110: assignment_operator (OPERATOR_PLUSEQU) ->  OPERATOR_PLUSEQU
     {372, 1}, // 111: assignment_operator (OPERATOR_MINUSEQU) ->  OPERATOR_MINUSEQU
     {372, 1}, // 112: assignment_operator (OPERATOR_BSLEQU) ->  OPERATOR_BSLEQU
     {372, 1}, // 113: assignment_operator (OPERATOR_BSREQU) ->  OPERATOR_BSREQU
     {372, 1}, // 114: assignment_operator (OPERATOR_ANDEQU) ->  OPERATOR_ANDEQU
     {372, 1}, // 115: assignment_operator (OPERATOR_XOREQU) ->  OPERATOR_XOREQU
     {372, 1}, // 116: assignment_operator (OPERATOR_OREQU) ->  OPERATOR_OREQU
     {353, 1}, // 117: expr ->  assignment_expr
     {353, 3}, // 118: expr (COMMA) ->  expr COMMA assignment_expr
     {373, 1}, // 119: constant_expr ->  conditional_expr
     {374, 2}, // 120: declaration (SCOLON) ->  declaration_specifiers SCOLON
     {374, 3}, // 121: declaration (SCOLON) ->  declaration_specifiers initialiser_declarator_list SCOLON
     {375, 1}, // 122: declaration_specifiers ->  storage_class_specifier
     {375, 2}, // 123: declaration_specifiers ->  storage_class_specifier declaration_specifiers
     {375, 1}, // 124: declaration_specifiers ->  type_specifier
     {375, 2}, // 125: declaration_specifiers ->  type_specifier declaration_specifiers
     {375, 1}, // 126: declaration_specifiers ->  type_qualifier
     {375, 2}, // 127: declaration_specifiers ->  type_qualifier declaration_specifiers
     {376, 1}, // 128: initialiser_declarator_list ->  initialiser_declarator
     {376, 3}, // 129: initialiser_declarator_list (COMMA) ->  initialiser_declarator_list COMMA initialiser_declarator
     {380, 1}, // 130: initialiser_declarator ->  declaration
     {380, 3}, // 131: initialiser_declarator (EQUALS) ->  declaration EQUALS initialiser
     {377, 1}, // 132: storage_class_specifier (KW_TYPEDEF) ->  KW_TYPEDEF
     {377, 1}, // 133: storage_class_specifier (KW_EXTERN) ->  KW_EXTERN
     {377, 1}, // 134: storage_class_specifier (KW_STATIC) ->  KW_STATIC
     {377, 1}, // 135: storage_class_specifier (KW_AUTO) ->  KW_AUTO
     {377, 1}, // 136: storage_class_specifier (KW_REGISTER) ->  KW_REGISTER
     {378, 1}, // 137: type_specifier (KW_VOID) ->  KW_VOID
     {378, 1}, // 138: type_specifier (KW_CHAR) ->  KW_CHAR
     {378, 1}, // 139: type_specifier (KW_SHORT) ->  KW_SHORT
     {378, 1}, // 140: type_specifier (KW_INT) ->  KW_INT
     {378, 1}, // 141: type_specifier (KW_LONG) ->  KW_LONG
     {378, 1}, // 142: type_specifier (KW_FLOAT) ->  KW_FLOAT
     {378, 1}, // 143: type_specifier (KW_DOUBLE) ->  KW_DOUBLE
     {378, 1}, // 144: type_specifier (KW_SIGNED) ->  KW_SIGNED
     {378, 1}, // 145: type_specifier (KW_UNSIGNED) ->  KW_UNSIGNED
     {378, 1}, // 146: type_specifier ->  struct_union_specifier
     {378, 1}, // 147: type_specifier ->  enum_specifier
     {378, 1}, // 148: type_specifier ->  typedef_name
     {382, 4}, // 149: struct_union_specifier (LBRACE) ->  struct_union LBRACE struct_declaration_list RBRACE
     {382, 5}, // 150: struct_union_specifier (IDENTIFIER) ->  struct_union IDENTIFIER LBRACE struct_declaration_list RBRACE
     {382, 2}, // 151: struct_union_specifier (IDENTIFIER) ->  struct_union IDENTIFIER
     {385, 1}, // 152: struct_union (KW_STRUCT) ->  KW_STRUCT
     {385, 1}, // 153: struct_union (KW_UNION) ->  KW_UNION
     {386, 1}, // 154: struct_declaration_list ->  struct_declaration
     {386, 2}, // 155: struct_declaration_list ->  struct_declaration_list struct_declaration
     {387, 3}, // 156: struct_declaration (SCOLON) ->  spec_qualifier_list struct_declarator_list SCOLON
     {388, 1}, // 157: spec_qualifier_list ->  type_specifier
     {388, 2}, // 158: spec_qualifier_list ->  type_specifier spec_qualifier_list
     {388, 1}, // 159: spec_qualifier_list ->  type_qualifier
     {388, 2}, // 160: spec_qualifier_list ->  type_qualifier spec_qualifier_list
     {389, 1}, // 161: struct_declarator_list ->  struct_declarator
     {389, 3}, // 162: struct_declarator_list (COMMA) ->  struct_declarator_list COMMA struct_declarator
     {390, 1}, // 163: struct_declarator ->  declarator
     {390, 2}, // 164: struct_declarator (COLON) ->  COLON constant_expr
     {390, 3}, // 165: struct_declarator (COLON) ->  declarator COLON constant_expr
     {383, 4}, // 166: enum_specifier (KW_ENUM) ->  KW_ENUM LBRACE enumerator_list RBRACE
     {383, 5}, // 167: enum_specifier (KW_ENUM) ->  KW_ENUM IDENTIFIER LBRACE enumerator_list RBRACE
     {383, 2}, // 168: enum_specifier (KW_ENUM) ->  KW_ENUM IDENTIFIER
     {392, 1}, // 169: enumerator_list ->  enumerator
     {392, 3}, // 170: enumerator_list (COMMA) ->  enumerator_list COMMA enumerator
     {393, 1}, // 171: enumerator ->  enumeration_constant
     {393, 3}, // 172: enumerator (EQUALS) ->  enumeration_constant EQUALS constant_expr
     {379, 1}, // 173: type_qualifier (KW_CONST) ->  KW_CONST
     {379, 1}, // 174: type_qualifier (KW_VOLATILE) ->  KW_VOLATILE
     {391, 1}, // 175: declarator ->  direct_declarator
     {391, 2}, // 176: declarator ->  pointer direct_declarator
     {394, 1}, // 177: direct_declarator (IDENTIFIER) ->  IDENTIFIER
     {394, 3}, // 178: direct_declarator (LBRACKET) ->  LBRACKET declarator RBRACKET
     {394, 3}, // 179: direct_declarator (LSQUBRACKET) ->  direct_declarator LSQUBRACKET RSQUBRACKET
     {394, 4}, // 180: direct_declarator (LSQUBRACKET) ->  direct_declarator LSQUBRACKET constant_expr RSQUBRACKET
     {394, 4}, // 181: direct_declarator (LBRACKET) ->  direct_declarator LBRACKET param_type_list RBRACKET
     {394, 3}, // 182: direct_declarator (LBRACKET) ->  direct_declarator LBRACKET RBRACKET
     {394, 4}, // 183: direct_declarator (LBRACKET) ->  direct_declarator LBRACKET identifier_list RBRACKET
     {395, 1}, // 184: pointer (ASTERISK) ->  ASTERISK
     {395, 2}, // 185: pointer (ASTERISK) ->  ASTERISK type_qualifier_list
     {395, 2}, // 186: pointer (ASTERISK) ->  ASTERISK pointer
     {395, 3}, // 187: pointer (ASTERISK) ->  ASTERISK type_qualifier_list pointer
     {398, 1}, // 188: type_qualifier_list ->  type_qualifier
     {398, 2}, // 189: type_qualifier_list ->  type_qualifier_list type_qualifier
     {396, 1}, // 190: param_type_list ->  param_list
     {396, 3}, // 191: param_type_list (COMMA) ->  param_list COMMA PUNCTUATOR_TRIPLEDOT
     {399, 1}, // 192: param_list ->  param_declaration
     {399, 3}, // 193: param_list (COMMA) ->  param_list COMMA param_declaration
     {400, 2}, // 194: param_declaration ->  declaration_specifiers declarator
     {400, 1}, // 195: param_declaration ->  declaration_specifiers
     {400, 2}, // 196: param_declaration ->  declaration_specifiers abstract_declarator
     {397, 1}, // 197: identifier_list (IDENTIFIER) ->  IDENTIFIER
     {397, 3}, // 198: identifier_list (COMMA) ->  identifier_list COMMA IDENTIFIER
     {360, 1}, // 199: type_name ->  spec_qualifier_list
     {360, 2}, // 200: type_name ->  spec_qualifier_list abstract_declarator
     {401, 1}, // 201: abstract_declarator ->  pointer
     {401, 1}, // 202: abstract_declarator ->  direct_abstract_declarator
     {401, 2}, // 203: abstract_declarator ->  pointer direct_abstract_declarator
     {402, 3}, // 204: direct_abstract_declarator (LBRACKET) ->  LBRACKET abstract_declarator RBRACKET
     {402, 2}, // 205: direct_abstract_declarator (LSQUBRACKET) ->  LSQUBRACKET RSQUBRACKET
     {402, 3}, // 206: direct_abstract_declarator (LSQUBRACKET) ->  direct_abstract_declarator LSQUBRACKET RSQUBRACKET
     {402, 3}, // 207: direct_abstract_declarator (LSQUBRACKET) ->  LSQUBRACKET constant_expr RSQUBRACKET
     {402, 4}, // 208: direct_abstract_declarator (LSQUBRACKET) ->  direct_abstract_declarator LSQUBRACKET constant_expr RSQUBRACKET
     {402, 2}, // 209: direct_abstract_declarator (LBRACKET) ->  LBRACKET RBRACKET
     {402, 3}, // 210: direct_abstract_declarator (LBRACKET) ->  direct_abstract_declarator LBRACKET RBRACKET
     {402, 3}, // 211: direct_abstract_declarator (LBRACKET) ->  LBRACKET param_type_list RBRACKET
     {402, 4}, // 212: direct_abstract_declarator (LBRACKET) ->  direct_abstract_declarator LBRACKET param_type_list RBRACKET
     {384, 1}, // 213: typedef_name (IDENTIFIER) ->  IDENTIFIER
     {381, 1}, // 214: initialiser ->  assignment_expr
     {381, 3}, // 215: initialiser (LBRACE) ->  LBRACE initialiser_list RBRACE
     {381, 4}, // 216: initialiser (LBRACE) ->  LBRACE initialiser_list COMMA RBRACE
     {403, 1}, // 217: initialiser_list ->  initialiser
     {403, 3}, // 218: initialiser_list (COMMA) ->  initialiser_list COMMA initialiser
     {404, 1}, // 219: stmt ->  labeled_stmt
     {404, 1}, // 220: stmt ->  compound_stmt
     {404, 1}, // 221: stmt ->  expr_stmt
     {404, 1}, // 222: stmt ->  select_stmt
     {404, 1}, // 223: stmt ->  iter_stmt
     {404, 1}, // 224: stmt ->  jump_stmt
     {405, 3}, // 225: labeled_stmt (IDENTIFIER) ->  IDENTIFIER COLON stmt
     {405, 4}, // 226: labeled_stmt (KW_CASE) ->  KW_CASE constant_expr COLON stmt
     {405, 3}, // 227: labeled_stmt (KW_DEFAULT) ->  KW_DEFAULT COLON stmt
     {406, 2}, // 228: compound_stmt (LBRACE) ->  LBRACE RBRACE
     {406, 3}, // 229: compound_stmt (LBRACE) ->  LBRACE declaration_list RBRACE
     {406, 3}, // 230: compound_stmt (LBRACE) ->  LBRACE stmt_list RBRACE
     {406, 4}, // 231: compound_stmt (LBRACE) ->  LBRACE declaration_list stmt_list RBRACE
     {411, 1}, // 232: declaration_list ->  declaration
     {411, 2}, // 233: declaration_list ->  declaration_list declaration
     {412, 1}, // 234: stmt_list ->  stmt
     {412, 2}, // 235: stmt_list ->  stmt_list stmt
     {407, 1}, // 236: expr_stmt (SCOLON) ->  SCOLON
     {407, 2}, // 237: expr_stmt (SCOLON) ->  expr SCOLON
     {408, 5}, // 238: select_stmt (KW_IF) ->  KW_IF LBRACKET expr RBRACKET stmt
     {408, 7}, // 239: select_stmt (KW_IF) ->  KW_IF LBRACKET expr RBRACKET stmt KW_ELSE stmt
     {408, 5}, // 240: select_stmt (KW_SWITCH) ->  KW_SWITCH LBRACKET expr RBRACKET stmt
     {409, 5}, // 241: iter_stmt (KW_WHILE) ->  KW_WHILE LBRACKET expr RBRACKET stmt
     {409, 7}, // 242: iter_stmt (KW_DO) ->  KW_DO stmt KW_WHILE LBRACKET expr RBRACKET SCOLON
     {409, 6}, // 243: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET SCOLON SCOLON RBRACKET stmt
     {409, 7}, // 244: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET expr SCOLON SCOLON RBRACKET stmt
     {409, 7}, // 245: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET SCOLON expr SCOLON RBRACKET stmt
     {409, 7}, // 246: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET SCOLON SCOLON expr RBRACKET stmt
     {409, 8}, // 247: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET expr SCOLON expr SCOLON RBRACKET stmt
     {409, 8}, // 248: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET expr SCOLON SCOLON expr RBRACKET stmt
     {409, 8}, // 249: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET SCOLON expr SCOLON expr RBRACKET stmt
     {409, 9}, // 250: iter_stmt (KW_FOR) ->  KW_FOR LBRACKET expr SCOLON expr SCOLON expr RBRACKET stmt
     {410, 3}, // 251: jump_stmt (KW_GOTO) ->  KW_GOTO IDENTIFIER SCOLON
     {410, 2}, // 252: jump_stmt (KW_CONTINUE) ->  KW_CONTINUE SCOLON
     {410, 2}, // 253: jump_stmt (KW_BREAK) ->  KW_BREAK SCOLON
     {410, 2}, // 254: jump_stmt (KW_RETURN) ->  KW_RETURN SCOLON
     {410, 3}, // 255: jump_stmt (KW_RETURN) ->  KW_RETURN expr SCOLON
     {413, 1}, // 256: translation_unit ->  external_declaration
     {413, 2}, // 257: translation_unit ->  translation_unit external_declaration
     {414, 1}, // 258: external_declaration ->  function_definition
     {414, 1}, // 259: external_declaration ->  declaration
     {415, 1}, // 260: function_definition ->  declarator
     {415, 2}, // 261: function_definition ->  declaration_specifiers declarator
     {415, 1}, // 262: function_definition ->  compound_stmt
     {415, 2}, // 263: function_definition ->  declaration_list compound_stmt
     {416, 1}, // 264: translation_unit_$ ->  translation_unit
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_TOKEN}, { 41} },                           
    { {       413}, {  1} }, // translation_unit       
    { {       414}, {  2} }, // external_declaration   
    { {       415}, {  3} }, // function_definition    
    { {       374}, {  4} }, // declaration            
    { {       391}, {  5} }, // declarator             
    { {       375}, {  6} }, // declaration_specifiers 
    { {       406}, {  7} }, // compound_stmt          
    { {       411}, {  8} }, // declaration_list       
    { {       394}, {  9} }, // direct_declarator      
    { {       395}, { 10} }, // pointer                
    { {       377}, { 11} }, // storage_class_specifier
    { {       378}, { 12} }, // type_specifier         
    { {       379}, { 13} }, // type_qualifier         
    { {       303}, { 14} }, // LBRACE                 
    { {       290}, { 15} }, // IDENTIFIER             
    { {       301}, { 16} }, // LBRACKET               
    { {       305}, { 17} }, // ASTERISK               
    { {       269}, { 18} }, // KW_TYPEDEF             
    { {       271}, { 19} }, // KW_EXTERN              
    { {       288}, { 20} }, // KW_STATIC              
    { {       258}, { 21} }, // KW_AUTO                
    { {       268}, { 22} }, // KW_REGISTER            
    { {       281}, { 23} }, // KW_VOID                
    { {       270}, { 24} }, // KW_CHAR                
    { {       276}, { 25} }, // KW_SHORT               
    { {       260}, { 26} }, // KW_INT                 
    { {       264}, { 27} }, // KW_LONG                
    { {       275}, { 28} }, // KW_FLOAT               
    { {       259}, { 29} }, // KW_DOUBLE              
    { {       280}, { 30} }, // KW_SIGNED              
    { {       277}, { 31} }, // KW_UNSIGNED            
    { {       382}, { 32} }, // struct_union_specifier 
    { {       383}, { 33} }, // enum_specifier         
    { {       384}, { 34} }, // typedef_name           
    { {       274}, { 35} }, // KW_CONST               
    { {       285}, { 36} }, // KW_VOLATILE            
    { {       385}, { 37} }, // struct_union           
    { {       267}, { 38} }, // KW_ENUM                
    { {       261}, { 39} }, // KW_STRUCT              
    { {       273}, { 40} }, // KW_UNION               
    { {         0}, {  0} },                           
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {           41} },                           
    { {       414}, {           41} }, // external_declaration   
    { {       415}, {            3} }, // function_definition    
    { {       374}, {            4} }, // declaration            
    { {       391}, {            5} }, // declarator             
    { {       375}, {            6} }, // declaration_specifiers 
    { {       406}, {            7} }, // compound_stmt          
    { {       411}, {            8} }, // declaration_list       
    { {       394}, {            9} }, // direct_declarator      
    { {       395}, {           10} }, // pointer                
    { {       377}, {           11} }, // storage_class_specifier
    { {       378}, {           12} }, // type_specifier         
    { {       379}, {           13} }, // type_qualifier         
    { {       303}, {           14} }, // LBRACE                 
    { {       290}, {           15} }, // IDENTIFIER             
    { {       301}, {           16} }, // LBRACKET               
    { {       305}, {           17} }, // ASTERISK               
    { {       269}, {           18} }, // KW_TYPEDEF             
    { {       271}, {           19} }, // KW_EXTERN              
    { {       288}, {           20} }, // KW_STATIC              
    { {       258}, {           21} }, // KW_AUTO                
    { {       268}, {           22} }, // KW_REGISTER            
    { {       281}, {           23} }, // KW_VOID                
    { {       270}, {           24} }, // KW_CHAR                
    { {       276}, {           25} }, // KW_SHORT               
    { {       260}, {           26} }, // KW_INT                 
    { {       264}, {           27} }, // KW_LONG                
    { {       275}, {           28} }, // KW_FLOAT               
    { {       259}, {           29} }, // KW_DOUBLE              
    { {       280}, {           30} }, // KW_SIGNED              
    { {       277}, {           31} }, // KW_UNSIGNED            
    { {       382}, {           32} }, // struct_union_specifier 
    { {       383}, {           33} }, // enum_specifier         
    { {       384}, {           34} }, // typedef_name           
    { {       274}, {           35} }, // KW_CONST               
    { {       285}, {           36} }, // KW_VOLATILE            
    { {       385}, {           37} }, // struct_union           
    { {       267}, {           38} }, // KW_ENUM                
    { {       261}, {           39} }, // KW_STRUCT              
    { {       273}, {           40} }, // KW_UNION               
    { {     _EOF_}, { PARSE_ACCEPT} },                           
    { {         0}, {            0} },                           
};

SR__ s_2[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -256} }, 
};

SR__ s_3[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -258} }, 
};

SR__ s_4[] =
{
    { { REQ_DEF}, {    4} },            
    { {     301}, { -259} }, // LBRACKET
    { {     305}, { -259} }, // ASTERISK
    { {   _EOF_}, { -259} }, // _EOF_   
    { {       0}, { -232} },            
};

SR__ s_5[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -260} }, 
};

SR__ s_6[] =
{
    { { REQ_TOKEN}, { 38} },                               
    { {       391}, { 42} }, // declarator                 
    { {       309}, { 43} }, // SCOLON                     
    { {       376}, { 44} }, // initialiser_declarator_list
    { {       394}, {  9} }, // direct_declarator          
    { {       395}, { 10} }, // pointer                    
    { {       380}, { 45} }, // initialiser_declarator     
    { {       290}, { 15} }, // IDENTIFIER                 
    { {       301}, { 16} }, // LBRACKET                   
    { {       305}, { 17} }, // ASTERISK                   
    { {       374}, { 46} }, // declaration                
    { {       375}, { 47} }, // declaration_specifiers     
    { {       377}, { 11} }, // storage_class_specifier    
    { {       378}, { 12} }, // type_specifier             
    { {       379}, { 13} }, // type_qualifier             
    { {       269}, { 18} }, // KW_TYPEDEF                 
    { {       271}, { 19} }, // KW_EXTERN                  
    { {       288}, { 20} }, // KW_STATIC                  
    { {       258}, { 21} }, // KW_AUTO                    
    { {       268}, { 22} }, // KW_REGISTER                
    { {       281}, { 23} }, // KW_VOID                    
    { {       270}, { 24} }, // KW_CHAR                    
    { {       276}, { 25} }, // KW_SHORT                   
    { {       260}, { 26} }, // KW_INT                     
    { {       264}, { 27} }, // KW_LONG                    
    { {       275}, { 28} }, // KW_FLOAT                   
    { {       259}, { 29} }, // KW_DOUBLE                  
    { {       280}, { 30} }, // KW_SIGNED                  
    { {       277}, { 31} }, // KW_UNSIGNED                
    { {       382}, { 32} }, // struct_union_specifier     
    { {       383}, { 33} }, // enum_specifier             
    { {       384}, { 34} }, // typedef_name               
    { {       274}, { 35} }, // KW_CONST                   
    { {       285}, { 36} }, // KW_VOLATILE                
    { {       385}, { 37} }, // struct_union               
    { {       267}, { 38} }, // KW_ENUM                    
    { {       261}, { 39} }, // KW_STRUCT                  
    { {       273}, { 40} }, // KW_UNION                   
    { {         0}, {  0} },                               
};

SR__ s_7[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -262} }, 
};

SR__ s_8[] =
{
    { { REQ_TOKEN}, { 32} },                           
    { {       406}, { 48} }, // compound_stmt          
    { {       374}, { 49} }, // declaration            
    { {       303}, { 14} }, // LBRACE                 
    { {       375}, { 47} }, // declaration_specifiers 
    { {       377}, { 11} }, // storage_class_specifier
    { {       378}, { 12} }, // type_specifier         
    { {       379}, { 13} }, // type_qualifier         
    { {       269}, { 18} }, // KW_TYPEDEF             
    { {       271}, { 19} }, // KW_EXTERN              
    { {       288}, { 20} }, // KW_STATIC              
    { {       258}, { 21} }, // KW_AUTO                
    { {       268}, { 22} }, // KW_REGISTER            
    { {       281}, { 23} }, // KW_VOID                
    { {       270}, { 24} }, // KW_CHAR                
    { {       276}, { 25} }, // KW_SHORT               
    { {       260}, { 26} }, // KW_INT                 
    { {       264}, { 27} }, // KW_LONG                
    { {       275}, { 28} }, // KW_FLOAT               
    { {       259}, { 29} }, // KW_DOUBLE              
    { {       280}, { 30} }, // KW_SIGNED              
    { {       277}, { 31} }, // KW_UNSIGNED            
    { {       382}, { 32} }, // struct_union_specifier 
    { {       383}, { 33} }, // enum_specifier         
    { {       384}, { 34} }, // typedef_name           
    { {       274}, { 35} }, // KW_CONST               
    { {       285}, { 36} }, // KW_VOLATILE            
    { {       385}, { 37} }, // struct_union           
    { {       267}, { 38} }, // KW_ENUM                
    { {       290}, { 50} }, // IDENTIFIER             
    { {       261}, { 39} }, // KW_STRUCT              
    { {       273}, { 40} }, // KW_UNION               
    { {         0}, {  0} },                           
};

SR__ s_9[] =
{
    { { REQ_DEF}, {    3} },               
    { {     299}, {   51} }, // LSQUBRACKET
    { {     301}, {   52} }, // LBRACKET   
    { {       0}, { -175} },               
};

SR__ s_10[] =
{
    { { REQ_TOKEN}, {  4} },                     
    { {       394}, { 53} }, // direct_declarator
    { {       290}, { 54} }, // IDENTIFIER       
    { {       301}, { 16} }, // LBRACKET         
    { {         0}, {  0} },                     
};

SR__ s_11[] =
{
    { { REQ_DEF}, {   29} },                           
    { {     375}, {   55} }, // declaration_specifiers 
    { {     377}, {   11} }, // storage_class_specifier
    { {     378}, {   12} }, // type_specifier         
    { {     379}, {   13} }, // type_qualifier         
    { {     269}, {   18} }, // KW_TYPEDEF             
    { {     271}, {   19} }, // KW_EXTERN              
    { {     288}, {   20} }, // KW_STATIC              
    { {     258}, {   21} }, // KW_AUTO                
    { {     268}, {   22} }, // KW_REGISTER            
    { {     281}, {   23} }, // KW_VOID                
    { {     270}, {   24} }, // KW_CHAR                
    { {     276}, {   25} }, // KW_SHORT               
    { {     260}, {   26} }, // KW_INT                 
    { {     264}, {   27} }, // KW_LONG                
    { {     275}, {   28} }, // KW_FLOAT               
    { {     259}, {   29} }, // KW_DOUBLE              
    { {     280}, {   30} }, // KW_SIGNED              
    { {     277}, {   31} }, // KW_UNSIGNED            
    { {     382}, {   32} }, // struct_union_specifier 
    { {     383}, {   33} }, // enum_specifier         
    { {     384}, {   34} }, // typedef_name           
    { {     274}, {   35} }, // KW_CONST               
    { {     285}, {   36} }, // KW_VOLATILE            
    { {     385}, {   37} }, // struct_union           
    { {     267}, {   38} }, // KW_ENUM                
    { {     290}, {   50} }, // IDENTIFIER             
    { {     261}, {   39} }, // KW_STRUCT              
    { {     273}, {   40} }, // KW_UNION               
    { {       0}, { -122} },                           
};

SR__ s_12[] =
{
    { { REQ_DEF}, {   29} },                           
    { {     375}, {   56} }, // declaration_specifiers 
    { {     377}, {   11} }, // storage_class_specifier
    { {     378}, {   12} }, // type_specifier         
    { {     379}, {   13} }, // type_qualifier         
    { {     269}, {   18} }, // KW_TYPEDEF             
    { {     271}, {   19} }, // KW_EXTERN              
    { {     288}, {   20} }, // KW_STATIC              
    { {     258}, {   21} }, // KW_AUTO                
    { {     268}, {   22} }, // KW_REGISTER            
    { {     281}, {   23} }, // KW_VOID                
    { {     270}, {   24} }, // KW_CHAR                
    { {     276}, {   25} }, // KW_SHORT               
    { {     260}, {   26} }, // KW_INT                 
    { {     264}, {   27} }, // KW_LONG                
    { {     275}, {   28} }, // KW_FLOAT               
    { {     259}, {   29} }, // KW_DOUBLE              
    { {     280}, {   30} }, // KW_SIGNED              
    { {     277}, {   31} }, // KW_UNSIGNED            
    { {     382}, {   32} }, // struct_union_specifier 
    { {     383}, {   33} }, // enum_specifier         
    { {     384}, {   34} }, // typedef_name           
    { {     274}, {   35} }, // KW_CONST               
    { {     285}, {   36} }, // KW_VOLATILE            
    { {     385}, {   37} }, // struct_union           
    { {     267}, {   38} }, // KW_ENUM                
    { {     290}, {   50} }, // IDENTIFIER             
    { {     261}, {   39} }, // KW_STRUCT              
    { {     273}, {   40} }, // KW_UNION               
    { {       0}, { -124} },                           
};

SR__ s_13[] =
{
    { { REQ_DEF}, {   29} },                           
    { {     375}, {   57} }, // declaration_specifiers 
    { {     377}, {   11} }, // storage_class_specifier
    { {     378}, {   12} }, // type_specifier         
    { {     379}, {   13} }, // type_qualifier         
    { {     269}, {   18} }, // KW_TYPEDEF             
    { {     271}, {   19} }, // KW_EXTERN              
    { {     288}, {   20} }, // KW_STATIC              
    { {     258}, {   21} }, // KW_AUTO                
    { {     268}, {   22} }, // KW_REGISTER            
    { {     281}, {   23} }, // KW_VOID                
    { {     270}, {   24} }, // KW_CHAR                
    { {     276}, {   25} }, // KW_SHORT               
    { {     260}, {   26} }, // KW_INT                 
    { {     264}, {   27} }, // KW_LONG                
    { {     275}, {   28} }, // KW_FLOAT               
    { {     259}, {   29} }, // KW_DOUBLE              
    { {     280}, {   30} }, // KW_SIGNED              
    { {     277}, {   31} }, // KW_UNSIGNED            
    { {     382}, {   32} }, // struct_union_specifier 
    { {     383}, {   33} }, // enum_specifier         
    { {     384}, {   34} }, // typedef_name           
    { {     274}, {   35} }, // KW_CONST               
    { {     285}, {   36} }, // KW_VOLATILE            
    { {     385}, {   37} }, // struct_union           
    { {     267}, {   38} }, // KW_ENUM                
    { {     290}, {   50} }, // IDENTIFIER             
    { {     261}, {   39} }, // KW_STRUCT              
    { {     273}, {   40} }, // KW_UNION               
    { {       0}, { -126} },                           
};

SR__ s_14[] =
{
    { { REQ_TOKEN}, {  95} },                           
    { {       304}, {  58} }, // RBRACE                 
    { {       411}, {  59} }, // declaration_list       
    { {       412}, {  60} }, // stmt_list              
    { {       374}, {  61} }, // declaration            
    { {       404}, {  62} }, // stmt                   
    { {       375}, {  47} }, // declaration_specifiers 
    { {       405}, {  63} }, // labeled_stmt           
    { {       406}, {  64} }, // compound_stmt          
    { {       407}, {  65} }, // expr_stmt              
    { {       408}, {  66} }, // select_stmt            
    { {       409}, {  67} }, // iter_stmt              
    { {       410}, {  68} }, // jump_stmt              
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       290}, {  69} }, // IDENTIFIER             
    { {       266}, {  70} }, // KW_CASE                
    { {       282}, {  71} }, // KW_DEFAULT             
    { {       303}, {  14} }, // LBRACE                 
    { {       309}, {  72} }, // SCOLON                 
    { {       353}, {  73} }, // expr                   
    { {       287}, {  74} }, // KW_IF                  
    { {       265}, {  75} }, // KW_SWITCH              
    { {       289}, {  76} }, // KW_WHILE               
    { {       286}, {  77} }, // KW_DO                  
    { {       279}, {  78} }, // KW_FOR                 
    { {       283}, {  79} }, // KW_GOTO                
    { {       278}, {  80} }, // KW_CONTINUE            
    { {       262}, {  81} }, // KW_BREAK               
    { {       272}, {  82} }, // KW_RETURN              
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       356}, {  83} }, // assignment_expr        
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       371}, {  84} }, // conditional_expr       
    { {       357}, {  85} }, // unary_expr             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {       370}, {  86} }, // logical_or_expr        
    { {       354}, {  87} }, // postfix_expr           
    { {       312}, {  88} }, // OPERATOR_INCR          
    { {       313}, {  89} }, // OPERATOR_DECR          
    { {       358}, {  90} }, // unary_operation        
    { {       284}, {  91} }, // KW_SIZEOF              
    { {       369}, {  92} }, // logical_and_expr       
    { {       352}, {  93} }, // primary_expr           
    { {       314}, {  94} }, // OPERATOR_BITAND        
    { {       305}, {  95} }, // ASTERISK               
    { {       315}, {  96} }, // OPERATOR_PLUS          
    { {       316}, {  97} }, // OPERATOR_MINUS         
    { {       317}, {  98} }, // OPERATOR_BITNEG        
    { {       318}, {  99} }, // OPERATOR_BOOLNEG       
    { {       368}, { 100} }, // or_expr                
    { {       346}, { 101} }, // constant               
    { {       351}, { 102} }, // string_literal         
    { {       301}, { 103} }, // LBRACKET               
    { {       367}, { 104} }, // xor_expr               
    { {       347}, { 105} }, // floating_constant      
    { {       348}, { 106} }, // integer_constant       
    { {       349}, { 107} }, // enumeration_constant   
    { {       350}, { 108} }, // character_constant     
    { {       297}, { 109} }, // STRINGLITERAL          
    { {       298}, { 110} }, // WSTRINGLITERAL         
    { {       366}, { 111} }, // and_expr               
    { {       291}, { 112} }, // FLOATCONSTANT          
    { {       292}, { 113} }, // DECCONSTANT            
    { {       293}, { 114} }, // OCTCONSTANT            
    { {       294}, { 115} }, // HEXCONSTANT            
    { {       295}, { 116} }, // CHARCONSTANT           
    { {       296}, { 117} }, // WCHARCONSTANT          
    { {       365}, { 118} }, // equality_expr          
    { {       364}, { 119} }, // relational_expr        
    { {       363}, { 120} }, // shift_expr             
    { {       362}, { 121} }, // additive_expr          
    { {       361}, { 122} }, // multiplicative_expr    
    { {       359}, { 123} }, // cast_expr              
    { {         0}, {   0} },                           
};

SR__ s_15[] =
{
    { { REQ_DEF}, {    3} },          
    { {     306}, { -213} }, // COMMA 
    { {     309}, { -213} }, // SCOLON
    { {       0}, { -177} },          
};

SR__ s_16[] =
{
    { { REQ_TOKEN}, {   7} },                     
    { {       391}, { 124} }, // declarator       
    { {       394}, {   9} }, // direct_declarator
    { {       395}, {  10} }, // pointer          
    { {       290}, {  54} }, // IDENTIFIER       
    { {       301}, {  16} }, // LBRACKET         
    { {       305}, {  17} }, // ASTERISK         
    { {         0}, {   0} },                     
};

SR__ s_17[] =
{
    { { REQ_DEF}, {    7} },                       
    { {     398}, {  125} }, // type_qualifier_list
    { {     395}, {  126} }, // pointer            
    { {     379}, {  127} }, // type_qualifier     
    { {     305}, {   17} }, // ASTERISK           
    { {     274}, {   35} }, // KW_CONST           
    { {     285}, {   36} }, // KW_VOLATILE        
    { {       0}, { -184} },                       
};

SR__ s_18[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -132} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -133} }, 
};

SR__ s_20[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -134} }, 
};

SR__ s_21[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -135} }, 
};

SR__ s_22[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -136} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -137} }, 
};

SR__ s_24[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -138} }, 
};

SR__ s_25[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -139} }, 
};

SR__ s_26[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -140} }, 
};

SR__ s_27[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -141} }, 
};

SR__ s_28[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -142} }, 
};

SR__ s_29[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -143} }, 
};

SR__ s_30[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -144} }, 
};

SR__ s_31[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -145} }, 
};

SR__ s_32[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -146} }, 
};

SR__ s_33[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -147} }, 
};

SR__ s_34[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -148} }, 
};

SR__ s_35[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -173} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -174} }, 
};

SR__ s_37[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       303}, { 128} }, // LBRACE    
    { {       290}, { 129} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_38[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       303}, { 130} }, // LBRACE    
    { {       290}, { 131} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_39[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -152} }, 
};

SR__ s_40[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -153} }, 
};

SR__ s_41[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -257} }, 
};

SR__ s_42[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -261} }, 
};

SR__ s_43[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -120} }, 
};

SR__ s_44[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 132} }, // SCOLON
    { {       306}, { 133} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_45[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -128} }, 
};

SR__ s_46[] =
{
    { { REQ_DEF}, {    2} },          
    { {     308}, {  134} }, // EQUALS
    { {       0}, { -130} },          
};

SR__ s_47[] =
{
    { { REQ_TOKEN}, { 33} },                               
    { {       309}, { 43} }, // SCOLON                     
    { {       376}, { 44} }, // initialiser_declarator_list
    { {       380}, { 45} }, // initialiser_declarator     
    { {       374}, { 46} }, // declaration                
    { {       375}, { 47} }, // declaration_specifiers     
    { {       377}, { 11} }, // storage_class_specifier    
    { {       378}, { 12} }, // type_specifier             
    { {       379}, { 13} }, // type_qualifier             
    { {       269}, { 18} }, // KW_TYPEDEF                 
    { {       271}, { 19} }, // KW_EXTERN                  
    { {       288}, { 20} }, // KW_STATIC                  
    { {       258}, { 21} }, // KW_AUTO                    
    { {       268}, { 22} }, // KW_REGISTER                
    { {       281}, { 23} }, // KW_VOID                    
    { {       270}, { 24} }, // KW_CHAR                    
    { {       276}, { 25} }, // KW_SHORT                   
    { {       260}, { 26} }, // KW_INT                     
    { {       264}, { 27} }, // KW_LONG                    
    { {       275}, { 28} }, // KW_FLOAT                   
    { {       259}, { 29} }, // KW_DOUBLE                  
    { {       280}, { 30} }, // KW_SIGNED                  
    { {       277}, { 31} }, // KW_UNSIGNED                
    { {       382}, { 32} }, // struct_union_specifier     
    { {       383}, { 33} }, // enum_specifier             
    { {       384}, { 34} }, // typedef_name               
    { {       274}, { 35} }, // KW_CONST                   
    { {       285}, { 36} }, // KW_VOLATILE                
    { {       385}, { 37} }, // struct_union               
    { {       267}, { 38} }, // KW_ENUM                    
    { {       290}, { 50} }, // IDENTIFIER                 
    { {       261}, { 39} }, // KW_STRUCT                  
    { {       273}, { 40} }, // KW_UNION                   
    { {         0}, {  0} },                               
};

SR__ s_48[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -263} }, 
};

SR__ s_49[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -233} }, 
};

SR__ s_50[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -213} }, 
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       300}, { 135} }, // RSQUBRACKET         
    { {       373}, { 136} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  34} },                           
    { {       396}, { 140} }, // param_type_list        
    { {       302}, { 141} }, // RBRACKET               
    { {       397}, { 142} }, // identifier_list        
    { {       399}, { 143} }, // param_list             
    { {       290}, { 144} }, // IDENTIFIER             
    { {       400}, { 145} }, // param_declaration      
    { {       375}, { 146} }, // declaration_specifiers 
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_53[] =
{
    { { REQ_DEF}, {    3} },               
    { {     299}, {   51} }, // LSQUBRACKET
    { {     301}, {   52} }, // LBRACKET   
    { {       0}, { -176} },               
};

SR__ s_54[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -177} }, 
};

SR__ s_55[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -123} }, 
};

SR__ s_56[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -125} }, 
};

SR__ s_57[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -127} }, 
};

SR__ s_58[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -228} }, 
};

SR__ s_59[] =
{
    { { REQ_TOKEN}, {  94} },                           
    { {       304}, { 147} }, // RBRACE                 
    { {       412}, { 148} }, // stmt_list              
    { {       374}, {  49} }, // declaration            
    { {       404}, {  62} }, // stmt                   
    { {       375}, {  47} }, // declaration_specifiers 
    { {       405}, {  63} }, // labeled_stmt           
    { {       406}, {  64} }, // compound_stmt          
    { {       407}, {  65} }, // expr_stmt              
    { {       408}, {  66} }, // select_stmt            
    { {       409}, {  67} }, // iter_stmt              
    { {       410}, {  68} }, // jump_stmt              
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       290}, {  69} }, // IDENTIFIER             
    { {       266}, {  70} }, // KW_CASE                
    { {       282}, {  71} }, // KW_DEFAULT             
    { {       303}, {  14} }, // LBRACE                 
    { {       309}, {  72} }, // SCOLON                 
    { {       353}, {  73} }, // expr                   
    { {       287}, {  74} }, // KW_IF                  
    { {       265}, {  75} }, // KW_SWITCH              
    { {       289}, {  76} }, // KW_WHILE               
    { {       286}, {  77} }, // KW_DO                  
    { {       279}, {  78} }, // KW_FOR                 
    { {       283}, {  79} }, // KW_GOTO                
    { {       278}, {  80} }, // KW_CONTINUE            
    { {       262}, {  81} }, // KW_BREAK               
    { {       272}, {  82} }, // KW_RETURN              
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       356}, {  83} }, // assignment_expr        
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       371}, {  84} }, // conditional_expr       
    { {       357}, {  85} }, // unary_expr             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {       370}, {  86} }, // logical_or_expr        
    { {       354}, {  87} }, // postfix_expr           
    { {       312}, {  88} }, // OPERATOR_INCR          
    { {       313}, {  89} }, // OPERATOR_DECR          
    { {       358}, {  90} }, // unary_operation        
    { {       284}, {  91} }, // KW_SIZEOF              
    { {       369}, {  92} }, // logical_and_expr       
    { {       352}, {  93} }, // primary_expr           
    { {       314}, {  94} }, // OPERATOR_BITAND        
    { {       305}, {  95} }, // ASTERISK               
    { {       315}, {  96} }, // OPERATOR_PLUS          
    { {       316}, {  97} }, // OPERATOR_MINUS         
    { {       317}, {  98} }, // OPERATOR_BITNEG        
    { {       318}, {  99} }, // OPERATOR_BOOLNEG       
    { {       368}, { 100} }, // or_expr                
    { {       346}, { 101} }, // constant               
    { {       351}, { 102} }, // string_literal         
    { {       301}, { 103} }, // LBRACKET               
    { {       367}, { 104} }, // xor_expr               
    { {       347}, { 105} }, // floating_constant      
    { {       348}, { 106} }, // integer_constant       
    { {       349}, { 107} }, // enumeration_constant   
    { {       350}, { 108} }, // character_constant     
    { {       297}, { 109} }, // STRINGLITERAL          
    { {       298}, { 110} }, // WSTRINGLITERAL         
    { {       366}, { 111} }, // and_expr               
    { {       291}, { 112} }, // FLOATCONSTANT          
    { {       292}, { 113} }, // DECCONSTANT            
    { {       293}, { 114} }, // OCTCONSTANT            
    { {       294}, { 115} }, // HEXCONSTANT            
    { {       295}, { 116} }, // CHARCONSTANT           
    { {       296}, { 117} }, // WCHARCONSTANT          
    { {       365}, { 118} }, // equality_expr          
    { {       364}, { 119} }, // relational_expr        
    { {       363}, { 120} }, // shift_expr             
    { {       362}, { 121} }, // additive_expr          
    { {       361}, { 122} }, // multiplicative_expr    
    { {       359}, { 123} }, // cast_expr              
    { {         0}, {   0} },                           
};

SR__ s_60[] =
{
    { { REQ_TOKEN}, {  65} },                        
    { {       304}, { 149} }, // RBRACE              
    { {       404}, { 150} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_61[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -232} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -234} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -219} }, 
};

SR__ s_64[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -220} }, 
};

SR__ s_65[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -221} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -222} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -223} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -224} }, 
};

SR__ s_69[] =
{
    { { REQ_DEF}, {   22} },                     
    { {     307}, {  152} }, // COLON            
    { {     320}, {  -41} }, // OPERATOR_MOD     
    { {     299}, {  -41} }, // LSQUBRACKET      
    { {     301}, {  -41} }, // LBRACKET         
    { {     305}, {  -41} }, // ASTERISK         
    { {     306}, {  -41} }, // COMMA            
    { {     308}, {  -41} }, // EQUALS           
    { {     309}, {  -41} }, // SCOLON           
    { {     310}, {  -41} }, // OPERATOR_DOT     
    { {     311}, {  -41} }, // OPERATOR_PTR     
    { {     312}, {  -41} }, // OPERATOR_INCR    
    { {     313}, {  -41} }, // OPERATOR_DECR    
    { {     314}, {  -41} }, // OPERATOR_BITAND  
    { {     315}, {  -41} }, // OPERATOR_PLUS    
    { {     316}, {  -41} }, // OPERATOR_MINUS   
    { {     319}, {  -41} }, // OPERATOR_DIV     
    { {     321}, {  -41} }, // OPERATOR_BSL     
    { {     322}, {  -41} }, // OPERATOR_BSR     
    { {     323}, {  -41} }, // OPERATOR_LT      
    { {     324}, {  -41} }, // OPERATOR_GT      
    { {     325}, {  -41} }, // OPERATOR_LTEQU   
    { {     326}, {  -41} }, // OPERATOR_GTEQU   
    { {     327}, {  -41} }, // OPERATOR_EQUALITY
    { {     328}, {  -41} }, // OPERATOR_NEQU    
    { {     329}, {  -41} }, // OPERATOR_BITXOR  
    { {     330}, {  -41} }, // OPERATOR_BITOR   
    { {     331}, {  -41} }, // OPERATOR_BOOLAND 
    { {     332}, {  -41} }, // OPERATOR_BOOLOR  
    { {     333}, {  -41} }, // OPERATOR_TERNARY 
    { {     334}, {  -41} }, // OPERATOR_MULTEQU 
    { {     335}, {  -41} }, // OPERATOR_DIVEQU  
    { {     336}, {  -41} }, // OPERATOR_MODEQU  
    { {     337}, {  -41} }, // OPERATOR_PLUSEQU 
    { {     338}, {  -41} }, // OPERATOR_MINUSEQU
    { {     339}, {  -41} }, // OPERATOR_BSLEQU  
    { {     340}, {  -41} }, // OPERATOR_BSREQU  
    { {     341}, {  -41} }, // OPERATOR_ANDEQU  
    { {     342}, {  -41} }, // OPERATOR_XOREQU  
    { {     343}, {  -41} }, // OPERATOR_OREQU   
    { {       0}, { -213} },                     
};

SR__ s_70[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       373}, { 153} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       307}, { 154} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_72[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -236} }, 
};

SR__ s_73[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 155} }, // SCOLON
    { {       306}, { 156} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       301}, { 157} }, // LBRACKET
    { {         0}, {   0} },            
};

SR__ s_75[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       301}, { 158} }, // LBRACKET
    { {         0}, {   0} },            
};

SR__ s_76[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       301}, { 159} }, // LBRACKET
    { {         0}, {   0} },            
};

SR__ s_77[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 160} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_78[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       301}, { 161} }, // LBRACKET
    { {         0}, {   0} },            
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       290}, { 162} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       309}, { 163} }, // SCOLON
    { {         0}, {   0} },          
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       309}, { 164} }, // SCOLON
    { {         0}, {   0} },          
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       309}, { 165} }, // SCOLON              
    { {       353}, { 166} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_83[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -117} }, 
};

SR__ s_84[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -104} }, 
};

SR__ s_85[] =
{
    { { REQ_DEF}, {  13} },                       
    { {     372}, { 167} }, // assignment_operator
    { {     308}, { 168} }, // EQUALS             
    { {     334}, { 169} }, // OPERATOR_MULTEQU   
    { {     335}, { 170} }, // OPERATOR_DIVEQU    
    { {     336}, { 171} }, // OPERATOR_MODEQU    
    { {     337}, { 172} }, // OPERATOR_PLUSEQU   
    { {     338}, { 173} }, // OPERATOR_MINUSEQU  
    { {     339}, { 174} }, // OPERATOR_BSLEQU    
    { {     340}, { 175} }, // OPERATOR_BSREQU    
    { {     341}, { 176} }, // OPERATOR_ANDEQU    
    { {     342}, { 177} }, // OPERATOR_XOREQU    
    { {     343}, { 178} }, // OPERATOR_OREQU     
    { {       0}, { -72} },                       
};

SR__ s_86[] =
{
    { { REQ_DEF}, {    3} },                    
    { {     333}, {  179} }, // OPERATOR_TERNARY
    { {     332}, {  180} }, // OPERATOR_BOOLOR 
    { {       0}, { -102} },                    
};

SR__ s_87[] =
{
    { { REQ_DEF}, {   7} },                 
    { {     299}, { 181} }, // LSQUBRACKET  
    { {     301}, { 182} }, // LBRACKET     
    { {     310}, { 183} }, // OPERATOR_DOT 
    { {     311}, { 184} }, // OPERATOR_PTR 
    { {     312}, { 185} }, // OPERATOR_INCR
    { {     313}, { 186} }, // OPERATOR_DECR
    { {       0}, { -60} },                 
};

SR__ s_88[] =
{
    { { REQ_TOKEN}, {  30} },                        
    { {       357}, { 187} }, // unary_expr          
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 188} }, // LBRACKET            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {  30} },                        
    { {       357}, { 189} }, // unary_expr          
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 188} }, // LBRACKET            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_90[] =
{
    { { REQ_TOKEN}, {  31} },                        
    { {       359}, { 190} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {  30} },                        
    { {       357}, { 191} }, // unary_expr          
    { {       301}, { 192} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_92[] =
{
    { { REQ_DEF}, {    2} },                    
    { {     331}, {  193} }, // OPERATOR_BOOLAND
    { {       0}, { -100} },                    
};

SR__ s_93[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -68} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -69} }, 
};

SR__ s_98[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_99[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -71} }, 
};

SR__ s_100[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     330}, { 194} }, // OPERATOR_BITOR
    { {       0}, { -98} },                  
};

SR__ s_101[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_103[] =
{
    { { REQ_TOKEN}, {  66} },                          
    { {       353}, { 195} }, // expr                  
    { {       360}, { 196} }, // type_name             
    { {       356}, {  83} }, // assignment_expr       
    { {       388}, { 197} }, // spec_qualifier_list   
    { {       371}, {  84} }, // conditional_expr      
    { {       357}, {  85} }, // unary_expr            
    { {       378}, { 198} }, // type_specifier        
    { {       379}, { 199} }, // type_qualifier        
    { {       370}, {  86} }, // logical_or_expr       
    { {       354}, {  87} }, // postfix_expr          
    { {       312}, {  88} }, // OPERATOR_INCR         
    { {       313}, {  89} }, // OPERATOR_DECR         
    { {       358}, {  90} }, // unary_operation       
    { {       284}, {  91} }, // KW_SIZEOF             
    { {       281}, {  23} }, // KW_VOID               
    { {       270}, {  24} }, // KW_CHAR               
    { {       276}, {  25} }, // KW_SHORT              
    { {       260}, {  26} }, // KW_INT                
    { {       264}, {  27} }, // KW_LONG               
    { {       275}, {  28} }, // KW_FLOAT              
    { {       259}, {  29} }, // KW_DOUBLE             
    { {       280}, {  30} }, // KW_SIGNED             
    { {       277}, {  31} }, // KW_UNSIGNED           
    { {       382}, {  32} }, // struct_union_specifier
    { {       383}, {  33} }, // enum_specifier        
    { {       384}, {  34} }, // typedef_name          
    { {       274}, {  35} }, // KW_CONST              
    { {       285}, {  36} }, // KW_VOLATILE           
    { {       369}, {  92} }, // logical_and_expr      
    { {       352}, {  93} }, // primary_expr          
    { {       314}, {  94} }, // OPERATOR_BITAND       
    { {       305}, {  95} }, // ASTERISK              
    { {       315}, {  96} }, // OPERATOR_PLUS         
    { {       316}, {  97} }, // OPERATOR_MINUS        
    { {       317}, {  98} }, // OPERATOR_BITNEG       
    { {       318}, {  99} }, // OPERATOR_BOOLNEG      
    { {       385}, {  37} }, // struct_union          
    { {       267}, {  38} }, // KW_ENUM               
    { {       290}, { 200} }, // IDENTIFIER            
    { {       368}, { 100} }, // or_expr               
    { {       346}, { 101} }, // constant              
    { {       351}, { 102} }, // string_literal        
    { {       301}, { 103} }, // LBRACKET              
    { {       261}, {  39} }, // KW_STRUCT             
    { {       273}, {  40} }, // KW_UNION              
    { {       367}, { 104} }, // xor_expr              
    { {       347}, { 105} }, // floating_constant     
    { {       348}, { 106} }, // integer_constant      
    { {       349}, { 107} }, // enumeration_constant  
    { {       350}, { 108} }, // character_constant    
    { {       297}, { 109} }, // STRINGLITERAL         
    { {       298}, { 110} }, // WSTRINGLITERAL        
    { {       366}, { 111} }, // and_expr              
    { {       291}, { 112} }, // FLOATCONSTANT         
    { {       292}, { 113} }, // DECCONSTANT           
    { {       293}, { 114} }, // OCTCONSTANT           
    { {       294}, { 115} }, // HEXCONSTANT           
    { {       295}, { 116} }, // CHARCONSTANT          
    { {       296}, { 117} }, // WCHARCONSTANT         
    { {       365}, { 118} }, // equality_expr         
    { {       364}, { 119} }, // relational_expr       
    { {       363}, { 120} }, // shift_expr            
    { {       362}, { 121} }, // additive_expr         
    { {       361}, { 122} }, // multiplicative_expr   
    { {       359}, { 123} }, // cast_expr             
    { {         0}, {   0} },                          
};

SR__ s_104[] =
{
    { { REQ_DEF}, {   2} },                   
    { {     329}, { 201} }, // OPERATOR_BITXOR
    { {       0}, { -96} },                   
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_106[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_107[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -35} }, 
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_109[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_111[] =
{
    { { REQ_DEF}, {   2} },                   
    { {     314}, { 202} }, // OPERATOR_BITAND
    { {       0}, { -94} },                   
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ s_114[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_115[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ s_116[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ s_117[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_118[] =
{
    { { REQ_DEF}, {   3} },                     
    { {     327}, { 203} }, // OPERATOR_EQUALITY
    { {     328}, { 204} }, // OPERATOR_NEQU    
    { {       0}, { -92} },                     
};

SR__ s_119[] =
{
    { { REQ_DEF}, {   5} },                  
    { {     323}, { 205} }, // OPERATOR_LT   
    { {     324}, { 206} }, // OPERATOR_GT   
    { {     325}, { 207} }, // OPERATOR_LTEQU
    { {     326}, { 208} }, // OPERATOR_GTEQU
    { {       0}, { -89} },                  
};

SR__ s_120[] =
{
    { { REQ_DEF}, {   3} },                
    { {     321}, { 209} }, // OPERATOR_BSL
    { {     322}, { 210} }, // OPERATOR_BSR
    { {       0}, { -84} },                
};

SR__ s_121[] =
{
    { { REQ_DEF}, {   3} },                  
    { {     315}, { 211} }, // OPERATOR_PLUS 
    { {     316}, { 212} }, // OPERATOR_MINUS
    { {       0}, { -81} },                  
};

SR__ s_122[] =
{
    { { REQ_DEF}, {   4} },                
    { {     305}, { 213} }, // ASTERISK    
    { {     319}, { 214} }, // OPERATOR_DIV
    { {     320}, { 215} }, // OPERATOR_MOD
    { {       0}, { -78} },                
};

SR__ s_123[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_124[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 216} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_125[] =
{
    { { REQ_DEF}, {    6} },                  
    { {     395}, {  217} }, // pointer       
    { {     379}, {  218} }, // type_qualifier
    { {     305}, {   17} }, // ASTERISK      
    { {     274}, {   35} }, // KW_CONST      
    { {     285}, {   36} }, // KW_VOLATILE   
    { {       0}, { -185} },                  
};

SR__ s_126[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -186} }, 
};

SR__ s_127[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -188} }, 
};

SR__ s_128[] =
{
    { { REQ_TOKEN}, {  25} },                           
    { {       386}, { 219} }, // struct_declaration_list
    { {       387}, { 220} }, // struct_declaration     
    { {       388}, { 221} }, // spec_qualifier_list    
    { {       378}, { 198} }, // type_specifier         
    { {       379}, { 199} }, // type_qualifier         
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       290}, {  50} }, // IDENTIFIER             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_129[] =
{
    { { REQ_DEF}, {    2} },          
    { {     303}, {  222} }, // LBRACE
    { {       0}, { -151} },          
};

SR__ s_130[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       392}, { 223} }, // enumerator_list     
    { {       393}, { 224} }, // enumerator          
    { {       349}, { 225} }, // enumeration_constant
    { {       290}, { 226} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_131[] =
{
    { { REQ_DEF}, {    2} },          
    { {     303}, {  227} }, // LBRACE
    { {       0}, { -168} },          
};

SR__ s_132[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -121} }, 
};

SR__ s_133[] =
{
    { { REQ_TOKEN}, {  31} },                           
    { {       380}, { 228} }, // initialiser_declarator 
    { {       374}, {  46} }, // declaration            
    { {       375}, {  47} }, // declaration_specifiers 
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       290}, {  50} }, // IDENTIFIER             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_134[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       381}, { 229} }, // initialiser         
    { {       356}, { 230} }, // assignment_expr     
    { {       303}, { 231} }, // LBRACE              
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_135[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -179} }, 
};

SR__ s_136[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       300}, { 232} }, // RSQUBRACKET
    { {         0}, {   0} },               
};

SR__ s_137[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -119} }, 
};

SR__ s_138[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_139[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_140[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 233} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_141[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -182} }, 
};

SR__ s_142[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 234} }, // RBRACKET
    { {       306}, { 235} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_143[] =
{
    { { REQ_DEF}, {    2} },         
    { {     306}, {  236} }, // COMMA
    { {       0}, { -190} },         
};

SR__ s_144[] =
{
    { { REQ_DEF}, {    3} },            
    { {     302}, { -197} }, // RBRACKET
    { {     306}, { -197} }, // COMMA   
    { {       0}, { -213} },            
};

SR__ s_145[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -192} }, 
};

SR__ s_146[] =
{
    { { REQ_DEF}, {   10} },                              
    { {     391}, {  237} }, // declarator                
    { {     401}, {  238} }, // abstract_declarator       
    { {     394}, {    9} }, // direct_declarator         
    { {     395}, {  239} }, // pointer                   
    { {     402}, {  240} }, // direct_abstract_declarator
    { {     290}, {   54} }, // IDENTIFIER                
    { {     301}, {  241} }, // LBRACKET                  
    { {     305}, {   17} }, // ASTERISK                  
    { {     299}, {  242} }, // LSQUBRACKET               
    { {       0}, { -195} },                              
};

SR__ s_147[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -229} }, 
};

SR__ s_148[] =
{
    { { REQ_TOKEN}, {  65} },                        
    { {       304}, { 243} }, // RBRACE              
    { {       404}, { 150} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_149[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -230} }, 
};

SR__ s_150[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -235} }, 
};

SR__ s_151[] =
{
    { { REQ_DEF}, {   2} },                     
    { {     307}, { 152} }, // COLON            
    { {     320}, { -41} }, // OPERATOR_MOD     
    { {     299}, { -41} }, // LSQUBRACKET      
    { {     301}, { -41} }, // LBRACKET         
    { {     305}, { -41} }, // ASTERISK         
    { {     306}, { -41} }, // COMMA            
    { {     308}, { -41} }, // EQUALS           
    { {     309}, { -41} }, // SCOLON           
    { {     310}, { -41} }, // OPERATOR_DOT     
    { {     311}, { -41} }, // OPERATOR_PTR     
    { {     312}, { -41} }, // OPERATOR_INCR    
    { {     313}, { -41} }, // OPERATOR_DECR    
    { {     314}, { -41} }, // OPERATOR_BITAND  
    { {     315}, { -41} }, // OPERATOR_PLUS    
    { {     316}, { -41} }, // OPERATOR_MINUS   
    { {     319}, { -41} }, // OPERATOR_DIV     
    { {     321}, { -41} }, // OPERATOR_BSL     
    { {     322}, { -41} }, // OPERATOR_BSR     
    { {     323}, { -41} }, // OPERATOR_LT      
    { {     324}, { -41} }, // OPERATOR_GT      
    { {     325}, { -41} }, // OPERATOR_LTEQU   
    { {     326}, { -41} }, // OPERATOR_GTEQU   
    { {     327}, { -41} }, // OPERATOR_EQUALITY
    { {     328}, { -41} }, // OPERATOR_NEQU    
    { {     329}, { -41} }, // OPERATOR_BITXOR  
    { {     330}, { -41} }, // OPERATOR_BITOR   
    { {     331}, { -41} }, // OPERATOR_BOOLAND 
    { {     332}, { -41} }, // OPERATOR_BOOLOR  
    { {     333}, { -41} }, // OPERATOR_TERNARY 
    { {     334}, { -41} }, // OPERATOR_MULTEQU 
    { {     335}, { -41} }, // OPERATOR_DIVEQU  
    { {     336}, { -41} }, // OPERATOR_MODEQU  
    { {     337}, { -41} }, // OPERATOR_PLUSEQU 
    { {     338}, { -41} }, // OPERATOR_MINUSEQU
    { {     339}, { -41} }, // OPERATOR_BSLEQU  
    { {     340}, { -41} }, // OPERATOR_BSREQU  
    { {     341}, { -41} }, // OPERATOR_ANDEQU  
    { {     342}, { -41} }, // OPERATOR_XOREQU  
    { {     343}, { -41} }, // OPERATOR_OREQU   
    { {       0}, { -46} },                     
};

SR__ s_152[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 244} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_153[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       307}, { 245} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_154[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 246} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_155[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -237} }, 
};

SR__ s_156[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       356}, { 247} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_157[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 248} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_158[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 249} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_159[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 250} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_160[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       289}, { 251} }, // KW_WHILE
    { {         0}, {   0} },            
};

SR__ s_161[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       309}, { 252} }, // SCOLON              
    { {       353}, { 253} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_162[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       309}, { 254} }, // SCOLON
    { {         0}, {   0} },          
};

SR__ s_163[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -252} }, 
};

SR__ s_164[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -253} }, 
};

SR__ s_165[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -254} }, 
};

SR__ s_166[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 255} }, // SCOLON
    { {       306}, { 156} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_167[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       356}, { 256} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_168[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -106} }, 
};

SR__ s_169[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -107} }, 
};

SR__ s_170[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -108} }, 
};

SR__ s_171[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -109} }, 
};

SR__ s_172[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -110} }, 
};

SR__ s_173[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -111} }, 
};

SR__ s_174[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -112} }, 
};

SR__ s_175[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -113} }, 
};

SR__ s_176[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -114} }, 
};

SR__ s_177[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -115} }, 
};

SR__ s_178[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -116} }, 
};

SR__ s_179[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 257} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_180[] =
{
    { { REQ_TOKEN}, {  40} },                        
    { {       369}, { 258} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_181[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 259} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_182[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       302}, { 260} }, // RBRACKET            
    { {       355}, { 261} }, // arg_expr_list       
    { {       356}, { 262} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_183[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       290}, { 263} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_184[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       290}, { 264} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_185[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_186[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -57} }, 
};

SR__ s_187[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_188[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 195} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_189[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_190[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_191[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_192[] =
{
    { { REQ_TOKEN}, {  66} },                          
    { {       360}, { 265} }, // type_name             
    { {       353}, { 195} }, // expr                  
    { {       388}, { 197} }, // spec_qualifier_list   
    { {       356}, {  83} }, // assignment_expr       
    { {       378}, { 198} }, // type_specifier        
    { {       379}, { 199} }, // type_qualifier        
    { {       371}, {  84} }, // conditional_expr      
    { {       357}, {  85} }, // unary_expr            
    { {       281}, {  23} }, // KW_VOID               
    { {       270}, {  24} }, // KW_CHAR               
    { {       276}, {  25} }, // KW_SHORT              
    { {       260}, {  26} }, // KW_INT                
    { {       264}, {  27} }, // KW_LONG               
    { {       275}, {  28} }, // KW_FLOAT              
    { {       259}, {  29} }, // KW_DOUBLE             
    { {       280}, {  30} }, // KW_SIGNED             
    { {       277}, {  31} }, // KW_UNSIGNED           
    { {       382}, {  32} }, // struct_union_specifier
    { {       383}, {  33} }, // enum_specifier        
    { {       384}, {  34} }, // typedef_name          
    { {       274}, {  35} }, // KW_CONST              
    { {       285}, {  36} }, // KW_VOLATILE           
    { {       370}, {  86} }, // logical_or_expr       
    { {       354}, {  87} }, // postfix_expr          
    { {       312}, {  88} }, // OPERATOR_INCR         
    { {       313}, {  89} }, // OPERATOR_DECR         
    { {       358}, {  90} }, // unary_operation       
    { {       284}, {  91} }, // KW_SIZEOF             
    { {       385}, {  37} }, // struct_union          
    { {       267}, {  38} }, // KW_ENUM               
    { {       290}, { 200} }, // IDENTIFIER            
    { {       369}, {  92} }, // logical_and_expr      
    { {       352}, {  93} }, // primary_expr          
    { {       314}, {  94} }, // OPERATOR_BITAND       
    { {       305}, {  95} }, // ASTERISK              
    { {       315}, {  96} }, // OPERATOR_PLUS         
    { {       316}, {  97} }, // OPERATOR_MINUS        
    { {       317}, {  98} }, // OPERATOR_BITNEG       
    { {       318}, {  99} }, // OPERATOR_BOOLNEG      
    { {       261}, {  39} }, // KW_STRUCT             
    { {       273}, {  40} }, // KW_UNION              
    { {       368}, { 100} }, // or_expr               
    { {       346}, { 101} }, // constant              
    { {       351}, { 102} }, // string_literal        
    { {       301}, { 103} }, // LBRACKET              
    { {       367}, { 104} }, // xor_expr              
    { {       347}, { 105} }, // floating_constant     
    { {       348}, { 106} }, // integer_constant      
    { {       349}, { 107} }, // enumeration_constant  
    { {       350}, { 108} }, // character_constant    
    { {       297}, { 109} }, // STRINGLITERAL         
    { {       298}, { 110} }, // WSTRINGLITERAL        
    { {       366}, { 111} }, // and_expr              
    { {       291}, { 112} }, // FLOATCONSTANT         
    { {       292}, { 113} }, // DECCONSTANT           
    { {       293}, { 114} }, // OCTCONSTANT           
    { {       294}, { 115} }, // HEXCONSTANT           
    { {       295}, { 116} }, // CHARCONSTANT          
    { {       296}, { 117} }, // WCHARCONSTANT         
    { {       365}, { 118} }, // equality_expr         
    { {       364}, { 119} }, // relational_expr       
    { {       363}, { 120} }, // shift_expr            
    { {       362}, { 121} }, // additive_expr         
    { {       361}, { 122} }, // multiplicative_expr   
    { {       359}, { 123} }, // cast_expr             
    { {         0}, {   0} },                          
};

SR__ s_193[] =
{
    { { REQ_TOKEN}, {  39} },                        
    { {       368}, { 266} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_194[] =
{
    { { REQ_TOKEN}, {  38} },                        
    { {       367}, { 267} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_195[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 268} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_196[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 269} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_197[] =
{
    { { REQ_DEF}, {    7} },                              
    { {     401}, {  270} }, // abstract_declarator       
    { {     395}, {  271} }, // pointer                   
    { {     402}, {  240} }, // direct_abstract_declarator
    { {     305}, {   17} }, // ASTERISK                  
    { {     301}, {  272} }, // LBRACKET                  
    { {     299}, {  242} }, // LSQUBRACKET               
    { {       0}, { -199} },                              
};

SR__ s_198[] =
{
    { { REQ_DEF}, {   23} },                          
    { {     388}, {  273} }, // spec_qualifier_list   
    { {     378}, {  198} }, // type_specifier        
    { {     379}, {  199} }, // type_qualifier        
    { {     281}, {   23} }, // KW_VOID               
    { {     270}, {   24} }, // KW_CHAR               
    { {     276}, {   25} }, // KW_SHORT              
    { {     260}, {   26} }, // KW_INT                
    { {     264}, {   27} }, // KW_LONG               
    { {     275}, {   28} }, // KW_FLOAT              
    { {     259}, {   29} }, // KW_DOUBLE             
    { {     280}, {   30} }, // KW_SIGNED             
    { {     277}, {   31} }, // KW_UNSIGNED           
    { {     382}, {   32} }, // struct_union_specifier
    { {     383}, {   33} }, // enum_specifier        
    { {     384}, {   34} }, // typedef_name          
    { {     274}, {   35} }, // KW_CONST              
    { {     285}, {   36} }, // KW_VOLATILE           
    { {     385}, {   37} }, // struct_union          
    { {     267}, {   38} }, // KW_ENUM               
    { {     290}, {   50} }, // IDENTIFIER            
    { {     261}, {   39} }, // KW_STRUCT             
    { {     273}, {   40} }, // KW_UNION              
    { {       0}, { -157} },                          
};

SR__ s_199[] =
{
    { { REQ_DEF}, {   23} },                          
    { {     388}, {  274} }, // spec_qualifier_list   
    { {     378}, {  198} }, // type_specifier        
    { {     379}, {  199} }, // type_qualifier        
    { {     281}, {   23} }, // KW_VOID               
    { {     270}, {   24} }, // KW_CHAR               
    { {     276}, {   25} }, // KW_SHORT              
    { {     260}, {   26} }, // KW_INT                
    { {     264}, {   27} }, // KW_LONG               
    { {     275}, {   28} }, // KW_FLOAT              
    { {     259}, {   29} }, // KW_DOUBLE             
    { {     280}, {   30} }, // KW_SIGNED             
    { {     277}, {   31} }, // KW_UNSIGNED           
    { {     382}, {   32} }, // struct_union_specifier
    { {     383}, {   33} }, // enum_specifier        
    { {     384}, {   34} }, // typedef_name          
    { {     274}, {   35} }, // KW_CONST              
    { {     285}, {   36} }, // KW_VOLATILE           
    { {     385}, {   37} }, // struct_union          
    { {     267}, {   38} }, // KW_ENUM               
    { {     290}, {   50} }, // IDENTIFIER            
    { {     261}, {   39} }, // KW_STRUCT             
    { {     273}, {   40} }, // KW_UNION              
    { {       0}, { -159} },                          
};

SR__ s_200[] =
{
    { { REQ_DEF}, {   16} },               
    { {     259}, { -213} }, // KW_DOUBLE  
    { {     260}, { -213} }, // KW_INT     
    { {     261}, { -213} }, // KW_STRUCT  
    { {     264}, { -213} }, // KW_LONG    
    { {     267}, { -213} }, // KW_ENUM    
    { {     270}, { -213} }, // KW_CHAR    
    { {     273}, { -213} }, // KW_UNION   
    { {     274}, { -213} }, // KW_CONST   
    { {     275}, { -213} }, // KW_FLOAT   
    { {     276}, { -213} }, // KW_SHORT   
    { {     277}, { -213} }, // KW_UNSIGNED
    { {     280}, { -213} }, // KW_SIGNED  
    { {     281}, { -213} }, // KW_VOID    
    { {     285}, { -213} }, // KW_VOLATILE
    { {     290}, { -213} }, // IDENTIFIER 
    { {       0}, {  -41} },               
};

SR__ s_201[] =
{
    { { REQ_TOKEN}, {  37} },                        
    { {       366}, { 275} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_202[] =
{
    { { REQ_TOKEN}, {  36} },                        
    { {       365}, { 276} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_203[] =
{
    { { REQ_TOKEN}, {  35} },                        
    { {       364}, { 277} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_204[] =
{
    { { REQ_TOKEN}, {  35} },                        
    { {       364}, { 278} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_205[] =
{
    { { REQ_TOKEN}, {  34} },                        
    { {       363}, { 279} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_206[] =
{
    { { REQ_TOKEN}, {  34} },                        
    { {       363}, { 280} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_207[] =
{
    { { REQ_TOKEN}, {  34} },                        
    { {       363}, { 281} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_208[] =
{
    { { REQ_TOKEN}, {  34} },                        
    { {       363}, { 282} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_209[] =
{
    { { REQ_TOKEN}, {  33} },                        
    { {       362}, { 283} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_210[] =
{
    { { REQ_TOKEN}, {  33} },                        
    { {       362}, { 284} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_211[] =
{
    { { REQ_TOKEN}, {  32} },                        
    { {       361}, { 285} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_212[] =
{
    { { REQ_TOKEN}, {  32} },                        
    { {       361}, { 286} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_213[] =
{
    { { REQ_TOKEN}, {  31} },                        
    { {       359}, { 287} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_214[] =
{
    { { REQ_TOKEN}, {  31} },                        
    { {       359}, { 288} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_215[] =
{
    { { REQ_TOKEN}, {  31} },                        
    { {       359}, { 289} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_216[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -178} }, 
};

SR__ s_217[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -187} }, 
};

SR__ s_218[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -189} }, 
};

SR__ s_219[] =
{
    { { REQ_TOKEN}, {  25} },                          
    { {       304}, { 290} }, // RBRACE                
    { {       387}, { 291} }, // struct_declaration    
    { {       388}, { 221} }, // spec_qualifier_list   
    { {       378}, { 198} }, // type_specifier        
    { {       379}, { 199} }, // type_qualifier        
    { {       281}, {  23} }, // KW_VOID               
    { {       270}, {  24} }, // KW_CHAR               
    { {       276}, {  25} }, // KW_SHORT              
    { {       260}, {  26} }, // KW_INT                
    { {       264}, {  27} }, // KW_LONG               
    { {       275}, {  28} }, // KW_FLOAT              
    { {       259}, {  29} }, // KW_DOUBLE             
    { {       280}, {  30} }, // KW_SIGNED             
    { {       277}, {  31} }, // KW_UNSIGNED           
    { {       382}, {  32} }, // struct_union_specifier
    { {       383}, {  33} }, // enum_specifier        
    { {       384}, {  34} }, // typedef_name          
    { {       274}, {  35} }, // KW_CONST              
    { {       285}, {  36} }, // KW_VOLATILE           
    { {       385}, {  37} }, // struct_union          
    { {       267}, {  38} }, // KW_ENUM               
    { {       290}, {  50} }, // IDENTIFIER            
    { {       261}, {  39} }, // KW_STRUCT             
    { {       273}, {  40} }, // KW_UNION              
    { {         0}, {   0} },                          
};

SR__ s_220[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -154} }, 
};

SR__ s_221[] =
{
    { { REQ_TOKEN}, {  10} },                          
    { {       389}, { 292} }, // struct_declarator_list
    { {       390}, { 293} }, // struct_declarator     
    { {       391}, { 294} }, // declarator            
    { {       307}, { 295} }, // COLON                 
    { {       394}, {   9} }, // direct_declarator     
    { {       395}, {  10} }, // pointer               
    { {       290}, {  54} }, // IDENTIFIER            
    { {       301}, {  16} }, // LBRACKET              
    { {       305}, {  17} }, // ASTERISK              
    { {         0}, {   0} },                          
};

SR__ s_222[] =
{
    { { REQ_TOKEN}, {  25} },                           
    { {       386}, { 296} }, // struct_declaration_list
    { {       387}, { 220} }, // struct_declaration     
    { {       388}, { 221} }, // spec_qualifier_list    
    { {       378}, { 198} }, // type_specifier         
    { {       379}, { 199} }, // type_qualifier         
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       290}, {  50} }, // IDENTIFIER             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_223[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       304}, { 297} }, // RBRACE
    { {       306}, { 298} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_224[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -169} }, 
};

SR__ s_225[] =
{
    { { REQ_DEF}, {    2} },          
    { {     308}, {  299} }, // EQUALS
    { {       0}, { -171} },          
};

SR__ s_226[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_227[] =
{
    { { REQ_TOKEN}, {   5} },                        
    { {       392}, { 300} }, // enumerator_list     
    { {       393}, { 224} }, // enumerator          
    { {       349}, { 225} }, // enumeration_constant
    { {       290}, { 226} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_228[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -129} }, 
};

SR__ s_229[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -131} }, 
};

SR__ s_230[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -214} }, 
};

SR__ s_231[] =
{
    { { REQ_TOKEN}, {  46} },                        
    { {       403}, { 301} }, // initialiser_list    
    { {       381}, { 302} }, // initialiser         
    { {       356}, { 230} }, // assignment_expr     
    { {       303}, { 231} }, // LBRACE              
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_232[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -180} }, 
};

SR__ s_233[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -181} }, 
};

SR__ s_234[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -183} }, 
};

SR__ s_235[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       290}, { 303} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_236[] =
{
    { { REQ_TOKEN}, {  31} },                           
    { {       344}, { 304} }, // PUNCTUATOR_TRIPLEDOT   
    { {       400}, { 305} }, // param_declaration      
    { {       375}, { 146} }, // declaration_specifiers 
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       290}, {  50} }, // IDENTIFIER             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_237[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -194} }, 
};

SR__ s_238[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -196} }, 
};

SR__ s_239[] =
{
    { { REQ_DEF}, {    6} },                              
    { {     394}, {   53} }, // direct_declarator         
    { {     402}, {  306} }, // direct_abstract_declarator
    { {     290}, {   54} }, // IDENTIFIER                
    { {     301}, {  241} }, // LBRACKET                  
    { {     299}, {  242} }, // LSQUBRACKET               
    { {       0}, { -201} },                              
};

SR__ s_240[] =
{
    { { REQ_DEF}, {    3} },               
    { {     299}, {  307} }, // LSQUBRACKET
    { {     301}, {  308} }, // LBRACKET   
    { {       0}, { -202} },               
};

SR__ s_241[] =
{
    { { REQ_TOKEN}, {  41} },                              
    { {       391}, { 124} }, // declarator                
    { {       401}, { 309} }, // abstract_declarator       
    { {       302}, { 310} }, // RBRACKET                  
    { {       396}, { 311} }, // param_type_list           
    { {       394}, {   9} }, // direct_declarator         
    { {       395}, { 239} }, // pointer                   
    { {       402}, { 240} }, // direct_abstract_declarator
    { {       399}, { 143} }, // param_list                
    { {       290}, {  15} }, // IDENTIFIER                
    { {       301}, { 241} }, // LBRACKET                  
    { {       305}, {  17} }, // ASTERISK                  
    { {       299}, { 242} }, // LSQUBRACKET               
    { {       400}, { 145} }, // param_declaration         
    { {       375}, { 146} }, // declaration_specifiers    
    { {       377}, {  11} }, // storage_class_specifier   
    { {       378}, {  12} }, // type_specifier            
    { {       379}, {  13} }, // type_qualifier            
    { {       269}, {  18} }, // KW_TYPEDEF                
    { {       271}, {  19} }, // KW_EXTERN                 
    { {       288}, {  20} }, // KW_STATIC                 
    { {       258}, {  21} }, // KW_AUTO                   
    { {       268}, {  22} }, // KW_REGISTER               
    { {       281}, {  23} }, // KW_VOID                   
    { {       270}, {  24} }, // KW_CHAR                   
    { {       276}, {  25} }, // KW_SHORT                  
    { {       260}, {  26} }, // KW_INT                    
    { {       264}, {  27} }, // KW_LONG                   
    { {       275}, {  28} }, // KW_FLOAT                  
    { {       259}, {  29} }, // KW_DOUBLE                 
    { {       280}, {  30} }, // KW_SIGNED                 
    { {       277}, {  31} }, // KW_UNSIGNED               
    { {       382}, {  32} }, // struct_union_specifier    
    { {       383}, {  33} }, // enum_specifier            
    { {       384}, {  34} }, // typedef_name              
    { {       274}, {  35} }, // KW_CONST                  
    { {       285}, {  36} }, // KW_VOLATILE               
    { {       385}, {  37} }, // struct_union              
    { {       267}, {  38} }, // KW_ENUM                   
    { {       261}, {  39} }, // KW_STRUCT                 
    { {       273}, {  40} }, // KW_UNION                  
    { {         0}, {   0} },                              
};

SR__ s_242[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       300}, { 312} }, // RSQUBRACKET         
    { {       373}, { 313} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_243[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -231} }, 
};

SR__ s_244[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -225} }, 
};

SR__ s_245[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 314} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_246[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -227} }, 
};

SR__ s_247[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -118} }, 
};

SR__ s_248[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 315} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_249[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 316} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_250[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 317} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_251[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       301}, { 318} }, // LBRACKET
    { {         0}, {   0} },            
};

SR__ s_252[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       309}, { 319} }, // SCOLON              
    { {       353}, { 320} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_253[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 321} }, // SCOLON
    { {       306}, { 156} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_254[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -251} }, 
};

SR__ s_255[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -255} }, 
};

SR__ s_256[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -105} }, 
};

SR__ s_257[] =
{
    { { REQ_TOKEN}, {   3} },         
    { {       307}, { 322} }, // COLON
    { {       306}, { 156} }, // COMMA
    { {         0}, {   0} },         
};

SR__ s_258[] =
{
    { { REQ_DEF}, {    2} },                    
    { {     331}, {  193} }, // OPERATOR_BOOLAND
    { {       0}, { -101} },                    
};

SR__ s_259[] =
{
    { { REQ_TOKEN}, {   3} },               
    { {       300}, { 323} }, // RSQUBRACKET
    { {       306}, { 156} }, // COMMA      
    { {         0}, {   0} },               
};

SR__ s_260[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_261[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 324} }, // RBRACKET
    { {       306}, { 325} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_262[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_263[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_264[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_265[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 326} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_266[] =
{
    { { REQ_DEF}, {   2} },                  
    { {     330}, { 194} }, // OPERATOR_BITOR
    { {       0}, { -99} },                  
};

SR__ s_267[] =
{
    { { REQ_DEF}, {   2} },                   
    { {     329}, { 201} }, // OPERATOR_BITXOR
    { {       0}, { -97} },                   
};

SR__ s_268[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -49} }, 
};

SR__ s_269[] =
{
    { { REQ_TOKEN}, {  31} },                        
    { {       359}, { 327} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_270[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -200} }, 
};

SR__ s_271[] =
{
    { { REQ_DEF}, {    4} },                              
    { {     402}, {  306} }, // direct_abstract_declarator
    { {     301}, {  272} }, // LBRACKET                  
    { {     299}, {  242} }, // LSQUBRACKET               
    { {       0}, { -201} },                              
};

SR__ s_272[] =
{
    { { REQ_TOKEN}, {  39} },                              
    { {       401}, { 309} }, // abstract_declarator       
    { {       302}, { 310} }, // RBRACKET                  
    { {       396}, { 311} }, // param_type_list           
    { {       395}, { 271} }, // pointer                   
    { {       402}, { 240} }, // direct_abstract_declarator
    { {       399}, { 143} }, // param_list                
    { {       305}, {  17} }, // ASTERISK                  
    { {       301}, { 272} }, // LBRACKET                  
    { {       299}, { 242} }, // LSQUBRACKET               
    { {       400}, { 145} }, // param_declaration         
    { {       375}, { 146} }, // declaration_specifiers    
    { {       377}, {  11} }, // storage_class_specifier   
    { {       378}, {  12} }, // type_specifier            
    { {       379}, {  13} }, // type_qualifier            
    { {       269}, {  18} }, // KW_TYPEDEF                
    { {       271}, {  19} }, // KW_EXTERN                 
    { {       288}, {  20} }, // KW_STATIC                 
    { {       258}, {  21} }, // KW_AUTO                   
    { {       268}, {  22} }, // KW_REGISTER               
    { {       281}, {  23} }, // KW_VOID                   
    { {       270}, {  24} }, // KW_CHAR                   
    { {       276}, {  25} }, // KW_SHORT                  
    { {       260}, {  26} }, // KW_INT                    
    { {       264}, {  27} }, // KW_LONG                   
    { {       275}, {  28} }, // KW_FLOAT                  
    { {       259}, {  29} }, // KW_DOUBLE                 
    { {       280}, {  30} }, // KW_SIGNED                 
    { {       277}, {  31} }, // KW_UNSIGNED               
    { {       382}, {  32} }, // struct_union_specifier    
    { {       383}, {  33} }, // enum_specifier            
    { {       384}, {  34} }, // typedef_name              
    { {       274}, {  35} }, // KW_CONST                  
    { {       285}, {  36} }, // KW_VOLATILE               
    { {       385}, {  37} }, // struct_union              
    { {       267}, {  38} }, // KW_ENUM                   
    { {       290}, {  50} }, // IDENTIFIER                
    { {       261}, {  39} }, // KW_STRUCT                 
    { {       273}, {  40} }, // KW_UNION                  
    { {         0}, {   0} },                              
};

SR__ s_273[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -158} }, 
};

SR__ s_274[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -160} }, 
};

SR__ s_275[] =
{
    { { REQ_DEF}, {   2} },                   
    { {     314}, { 202} }, // OPERATOR_BITAND
    { {       0}, { -95} },                   
};

SR__ s_276[] =
{
    { { REQ_DEF}, {   3} },                     
    { {     327}, { 203} }, // OPERATOR_EQUALITY
    { {     328}, { 204} }, // OPERATOR_NEQU    
    { {       0}, { -93} },                     
};

SR__ s_277[] =
{
    { { REQ_DEF}, {   5} },                  
    { {     323}, { 205} }, // OPERATOR_LT   
    { {     324}, { 206} }, // OPERATOR_GT   
    { {     325}, { 207} }, // OPERATOR_LTEQU
    { {     326}, { 208} }, // OPERATOR_GTEQU
    { {       0}, { -90} },                  
};

SR__ s_278[] =
{
    { { REQ_DEF}, {   5} },                  
    { {     323}, { 205} }, // OPERATOR_LT   
    { {     324}, { 206} }, // OPERATOR_GT   
    { {     325}, { 207} }, // OPERATOR_LTEQU
    { {     326}, { 208} }, // OPERATOR_GTEQU
    { {       0}, { -91} },                  
};

SR__ s_279[] =
{
    { { REQ_DEF}, {   3} },                
    { {     321}, { 209} }, // OPERATOR_BSL
    { {     322}, { 210} }, // OPERATOR_BSR
    { {       0}, { -85} },                
};

SR__ s_280[] =
{
    { { REQ_DEF}, {   3} },                
    { {     321}, { 209} }, // OPERATOR_BSL
    { {     322}, { 210} }, // OPERATOR_BSR
    { {       0}, { -86} },                
};

SR__ s_281[] =
{
    { { REQ_DEF}, {   3} },                
    { {     321}, { 209} }, // OPERATOR_BSL
    { {     322}, { 210} }, // OPERATOR_BSR
    { {       0}, { -87} },                
};

SR__ s_282[] =
{
    { { REQ_DEF}, {   3} },                
    { {     321}, { 209} }, // OPERATOR_BSL
    { {     322}, { 210} }, // OPERATOR_BSR
    { {       0}, { -88} },                
};

SR__ s_283[] =
{
    { { REQ_DEF}, {   3} },                  
    { {     315}, { 211} }, // OPERATOR_PLUS 
    { {     316}, { 212} }, // OPERATOR_MINUS
    { {       0}, { -82} },                  
};

SR__ s_284[] =
{
    { { REQ_DEF}, {   3} },                  
    { {     315}, { 211} }, // OPERATOR_PLUS 
    { {     316}, { 212} }, // OPERATOR_MINUS
    { {       0}, { -83} },                  
};

SR__ s_285[] =
{
    { { REQ_DEF}, {   4} },                
    { {     305}, { 213} }, // ASTERISK    
    { {     319}, { 214} }, // OPERATOR_DIV
    { {     320}, { 215} }, // OPERATOR_MOD
    { {       0}, { -79} },                
};

SR__ s_286[] =
{
    { { REQ_DEF}, {   4} },                
    { {     305}, { 213} }, // ASTERISK    
    { {     319}, { 214} }, // OPERATOR_DIV
    { {     320}, { 215} }, // OPERATOR_MOD
    { {       0}, { -80} },                
};

SR__ s_287[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_288[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_289[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_290[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -149} }, 
};

SR__ s_291[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -155} }, 
};

SR__ s_292[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 328} }, // SCOLON
    { {       306}, { 329} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_293[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -161} }, 
};

SR__ s_294[] =
{
    { { REQ_DEF}, {    2} },         
    { {     307}, {  330} }, // COLON
    { {       0}, { -163} },         
};

SR__ s_295[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       373}, { 331} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_296[] =
{
    { { REQ_TOKEN}, {  25} },                          
    { {       304}, { 332} }, // RBRACE                
    { {       387}, { 291} }, // struct_declaration    
    { {       388}, { 221} }, // spec_qualifier_list   
    { {       378}, { 198} }, // type_specifier        
    { {       379}, { 199} }, // type_qualifier        
    { {       281}, {  23} }, // KW_VOID               
    { {       270}, {  24} }, // KW_CHAR               
    { {       276}, {  25} }, // KW_SHORT              
    { {       260}, {  26} }, // KW_INT                
    { {       264}, {  27} }, // KW_LONG               
    { {       275}, {  28} }, // KW_FLOAT              
    { {       259}, {  29} }, // KW_DOUBLE             
    { {       280}, {  30} }, // KW_SIGNED             
    { {       277}, {  31} }, // KW_UNSIGNED           
    { {       382}, {  32} }, // struct_union_specifier
    { {       383}, {  33} }, // enum_specifier        
    { {       384}, {  34} }, // typedef_name          
    { {       274}, {  35} }, // KW_CONST              
    { {       285}, {  36} }, // KW_VOLATILE           
    { {       385}, {  37} }, // struct_union          
    { {       267}, {  38} }, // KW_ENUM               
    { {       290}, {  50} }, // IDENTIFIER            
    { {       261}, {  39} }, // KW_STRUCT             
    { {       273}, {  40} }, // KW_UNION              
    { {         0}, {   0} },                          
};

SR__ s_297[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -166} }, 
};

SR__ s_298[] =
{
    { { REQ_TOKEN}, {   4} },                        
    { {       393}, { 333} }, // enumerator          
    { {       349}, { 225} }, // enumeration_constant
    { {       290}, { 226} }, // IDENTIFIER          
    { {         0}, {   0} },                        
};

SR__ s_299[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       373}, { 334} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_300[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       304}, { 335} }, // RBRACE
    { {       306}, { 298} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_301[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       304}, { 336} }, // RBRACE
    { {       306}, { 337} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_302[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -217} }, 
};

SR__ s_303[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -198} }, 
};

SR__ s_304[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -191} }, 
};

SR__ s_305[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -193} }, 
};

SR__ s_306[] =
{
    { { REQ_DEF}, {    3} },               
    { {     299}, {  307} }, // LSQUBRACKET
    { {     301}, {  308} }, // LBRACKET   
    { {       0}, { -203} },               
};

SR__ s_307[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       300}, { 338} }, // RSQUBRACKET         
    { {       373}, { 339} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_308[] =
{
    { { REQ_TOKEN}, {  33} },                           
    { {       302}, { 340} }, // RBRACKET               
    { {       396}, { 341} }, // param_type_list        
    { {       399}, { 143} }, // param_list             
    { {       400}, { 145} }, // param_declaration      
    { {       375}, { 146} }, // declaration_specifiers 
    { {       377}, {  11} }, // storage_class_specifier
    { {       378}, {  12} }, // type_specifier         
    { {       379}, {  13} }, // type_qualifier         
    { {       269}, {  18} }, // KW_TYPEDEF             
    { {       271}, {  19} }, // KW_EXTERN              
    { {       288}, {  20} }, // KW_STATIC              
    { {       258}, {  21} }, // KW_AUTO                
    { {       268}, {  22} }, // KW_REGISTER            
    { {       281}, {  23} }, // KW_VOID                
    { {       270}, {  24} }, // KW_CHAR                
    { {       276}, {  25} }, // KW_SHORT               
    { {       260}, {  26} }, // KW_INT                 
    { {       264}, {  27} }, // KW_LONG                
    { {       275}, {  28} }, // KW_FLOAT               
    { {       259}, {  29} }, // KW_DOUBLE              
    { {       280}, {  30} }, // KW_SIGNED              
    { {       277}, {  31} }, // KW_UNSIGNED            
    { {       382}, {  32} }, // struct_union_specifier 
    { {       383}, {  33} }, // enum_specifier         
    { {       384}, {  34} }, // typedef_name           
    { {       274}, {  35} }, // KW_CONST               
    { {       285}, {  36} }, // KW_VOLATILE            
    { {       385}, {  37} }, // struct_union           
    { {       267}, {  38} }, // KW_ENUM                
    { {       290}, {  50} }, // IDENTIFIER             
    { {       261}, {  39} }, // KW_STRUCT              
    { {       273}, {  40} }, // KW_UNION               
    { {         0}, {   0} },                           
};

SR__ s_309[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 342} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_310[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -209} }, 
};

SR__ s_311[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 343} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_312[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -205} }, 
};

SR__ s_313[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       300}, { 344} }, // RSQUBRACKET
    { {         0}, {   0} },               
};

SR__ s_314[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -226} }, 
};

SR__ s_315[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 345} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_316[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 346} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_317[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 347} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_318[] =
{
    { { REQ_TOKEN}, {  44} },                        
    { {       353}, { 348} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_319[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       302}, { 349} }, // RBRACKET            
    { {       353}, { 350} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_320[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 351} }, // SCOLON
    { {       306}, { 156} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_321[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       309}, { 352} }, // SCOLON              
    { {       353}, { 353} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_322[] =
{
    { { REQ_TOKEN}, {  42} },                        
    { {       371}, { 354} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_323[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_324[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_325[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       356}, { 355} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_326[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_327[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_328[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -156} }, 
};

SR__ s_329[] =
{
    { { REQ_TOKEN}, {   9} },                     
    { {       390}, { 356} }, // struct_declarator
    { {       391}, { 294} }, // declarator       
    { {       307}, { 295} }, // COLON            
    { {       394}, {   9} }, // direct_declarator
    { {       395}, {  10} }, // pointer          
    { {       290}, {  54} }, // IDENTIFIER       
    { {       301}, {  16} }, // LBRACKET         
    { {       305}, {  17} }, // ASTERISK         
    { {         0}, {   0} },                     
};

SR__ s_330[] =
{
    { { REQ_TOKEN}, {  43} },                        
    { {       373}, { 357} }, // constant_expr       
    { {       371}, { 137} }, // conditional_expr    
    { {       370}, {  86} }, // logical_or_expr     
    { {       369}, {  92} }, // logical_and_expr    
    { {       368}, { 100} }, // or_expr             
    { {       367}, { 104} }, // xor_expr            
    { {       366}, { 111} }, // and_expr            
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {       357}, { 138} }, // unary_expr          
    { {       301}, { 103} }, // LBRACKET            
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {         0}, {   0} },                        
};

SR__ s_331[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -164} }, 
};

SR__ s_332[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -150} }, 
};

SR__ s_333[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -170} }, 
};

SR__ s_334[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -172} }, 
};

SR__ s_335[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -167} }, 
};

SR__ s_336[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -215} }, 
};

SR__ s_337[] =
{
    { { REQ_TOKEN}, {  46} },                        
    { {       304}, { 358} }, // RBRACE              
    { {       381}, { 359} }, // initialiser         
    { {       356}, { 230} }, // assignment_expr     
    { {       303}, { 231} }, // LBRACE              
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_338[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -206} }, 
};

SR__ s_339[] =
{
    { { REQ_TOKEN}, {   2} },               
    { {       300}, { 360} }, // RSQUBRACKET
    { {         0}, {   0} },               
};

SR__ s_340[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -210} }, 
};

SR__ s_341[] =
{
    { { REQ_TOKEN}, {   2} },            
    { {       302}, { 361} }, // RBRACKET
    { {         0}, {   0} },            
};

SR__ s_342[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -204} }, 
};

SR__ s_343[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -211} }, 
};

SR__ s_344[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -207} }, 
};

SR__ s_345[] =
{
    { { REQ_DEF}, {    2} },           
    { {     263}, {  362} }, // KW_ELSE
    { {       0}, { -238} },           
};

SR__ s_346[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -240} }, 
};

SR__ s_347[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -241} }, 
};

SR__ s_348[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 363} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_349[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 364} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_350[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 365} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_351[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       302}, { 366} }, // RBRACKET            
    { {       353}, { 367} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_352[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       302}, { 368} }, // RBRACKET            
    { {       353}, { 369} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_353[] =
{
    { { REQ_TOKEN}, {   3} },          
    { {       309}, { 370} }, // SCOLON
    { {       306}, { 156} }, // COMMA 
    { {         0}, {   0} },          
};

SR__ s_354[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -103} }, 
};

SR__ s_355[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_356[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -162} }, 
};

SR__ s_357[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -165} }, 
};

SR__ s_358[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -216} }, 
};

SR__ s_359[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -218} }, 
};

SR__ s_360[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -208} }, 
};

SR__ s_361[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -212} }, 
};

SR__ s_362[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 371} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_363[] =
{
    { { REQ_TOKEN}, {   2} },          
    { {       309}, { 372} }, // SCOLON
    { {         0}, {   0} },          
};

SR__ s_364[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -243} }, 
};

SR__ s_365[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 373} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_366[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 374} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_367[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 375} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_368[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 376} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_369[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 377} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_370[] =
{
    { { REQ_TOKEN}, {  45} },                        
    { {       302}, { 378} }, // RBRACKET            
    { {       353}, { 379} }, // expr                
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       290}, { 139} }, // IDENTIFIER          
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_371[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -239} }, 
};

SR__ s_372[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -242} }, 
};

SR__ s_373[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -246} }, 
};

SR__ s_374[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -245} }, 
};

SR__ s_375[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 380} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_376[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -244} }, 
};

SR__ s_377[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 381} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_378[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 382} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_379[] =
{
    { { REQ_TOKEN}, {   3} },            
    { {       302}, { 383} }, // RBRACKET
    { {       306}, { 156} }, // COMMA   
    { {         0}, {   0} },            
};

SR__ s_380[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -249} }, 
};

SR__ s_381[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -248} }, 
};

SR__ s_382[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -247} }, 
};

SR__ s_383[] =
{
    { { REQ_TOKEN}, {  64} },                        
    { {       404}, { 384} }, // stmt                
    { {       405}, {  63} }, // labeled_stmt        
    { {       406}, {  64} }, // compound_stmt       
    { {       407}, {  65} }, // expr_stmt           
    { {       408}, {  66} }, // select_stmt         
    { {       409}, {  67} }, // iter_stmt           
    { {       410}, {  68} }, // jump_stmt           
    { {       290}, { 151} }, // IDENTIFIER          
    { {       266}, {  70} }, // KW_CASE             
    { {       282}, {  71} }, // KW_DEFAULT          
    { {       303}, {  14} }, // LBRACE              
    { {       309}, {  72} }, // SCOLON              
    { {       353}, {  73} }, // expr                
    { {       287}, {  74} }, // KW_IF               
    { {       265}, {  75} }, // KW_SWITCH           
    { {       289}, {  76} }, // KW_WHILE            
    { {       286}, {  77} }, // KW_DO               
    { {       279}, {  78} }, // KW_FOR              
    { {       283}, {  79} }, // KW_GOTO             
    { {       278}, {  80} }, // KW_CONTINUE         
    { {       262}, {  81} }, // KW_BREAK            
    { {       272}, {  82} }, // KW_RETURN           
    { {       356}, {  83} }, // assignment_expr     
    { {       371}, {  84} }, // conditional_expr    
    { {       357}, {  85} }, // unary_expr          
    { {       370}, {  86} }, // logical_or_expr     
    { {       354}, {  87} }, // postfix_expr        
    { {       312}, {  88} }, // OPERATOR_INCR       
    { {       313}, {  89} }, // OPERATOR_DECR       
    { {       358}, {  90} }, // unary_operation     
    { {       284}, {  91} }, // KW_SIZEOF           
    { {       369}, {  92} }, // logical_and_expr    
    { {       352}, {  93} }, // primary_expr        
    { {       314}, {  94} }, // OPERATOR_BITAND     
    { {       305}, {  95} }, // ASTERISK            
    { {       315}, {  96} }, // OPERATOR_PLUS       
    { {       316}, {  97} }, // OPERATOR_MINUS      
    { {       317}, {  98} }, // OPERATOR_BITNEG     
    { {       318}, {  99} }, // OPERATOR_BOOLNEG    
    { {       368}, { 100} }, // or_expr             
    { {       346}, { 101} }, // constant            
    { {       351}, { 102} }, // string_literal      
    { {       301}, { 103} }, // LBRACKET            
    { {       367}, { 104} }, // xor_expr            
    { {       347}, { 105} }, // floating_constant   
    { {       348}, { 106} }, // integer_constant    
    { {       349}, { 107} }, // enumeration_constant
    { {       350}, { 108} }, // character_constant  
    { {       297}, { 109} }, // STRINGLITERAL       
    { {       298}, { 110} }, // WSTRINGLITERAL      
    { {       366}, { 111} }, // and_expr            
    { {       291}, { 112} }, // FLOATCONSTANT       
    { {       292}, { 113} }, // DECCONSTANT         
    { {       293}, { 114} }, // OCTCONSTANT         
    { {       294}, { 115} }, // HEXCONSTANT         
    { {       295}, { 116} }, // CHARCONSTANT        
    { {       296}, { 117} }, // WCHARCONSTANT       
    { {       365}, { 118} }, // equality_expr       
    { {       364}, { 119} }, // relational_expr     
    { {       363}, { 120} }, // shift_expr          
    { {       362}, { 121} }, // additive_expr       
    { {       361}, { 122} }, // multiplicative_expr 
    { {       359}, { 123} }, // cast_expr           
    { {         0}, {   0} },                        
};

SR__ s_384[] =
{
    { { DEF_RED}, {    1} }, 
    { {       0}, { -250} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,  s_114,  s_115,  s_116,  s_117,  s_118,  s_119,
  s_120,  s_121,  s_122,  s_123,  s_124,  s_125,  s_126,  s_127,  s_128,  s_129,
  s_130,  s_131,  s_132,  s_133,  s_134,  s_135,  s_136,  s_137,  s_138,  s_139,
  s_140,  s_141,  s_142,  s_143,  s_144,  s_145,  s_146,  s_147,  s_148,  s_149,
  s_150,  s_151,  s_152,  s_153,  s_154,  s_155,  s_156,  s_157,  s_158,  s_159,
  s_160,  s_161,  s_162,  s_163,  s_164,  s_165,  s_166,  s_167,  s_168,  s_169,
  s_170,  s_171,  s_172,  s_173,  s_174,  s_175,  s_176,  s_177,  s_178,  s_179,
  s_180,  s_181,  s_182,  s_183,  s_184,  s_185,  s_186,  s_187,  s_188,  s_189,
  s_190,  s_191,  s_192,  s_193,  s_194,  s_195,  s_196,  s_197,  s_198,  s_199,
  s_200,  s_201,  s_202,  s_203,  s_204,  s_205,  s_206,  s_207,  s_208,  s_209,
  s_210,  s_211,  s_212,  s_213,  s_214,  s_215,  s_216,  s_217,  s_218,  s_219,
  s_220,  s_221,  s_222,  s_223,  s_224,  s_225,  s_226,  s_227,  s_228,  s_229,
  s_230,  s_231,  s_232,  s_233,  s_234,  s_235,  s_236,  s_237,  s_238,  s_239,
  s_240,  s_241,  s_242,  s_243,  s_244,  s_245,  s_246,  s_247,  s_248,  s_249,
  s_250,  s_251,  s_252,  s_253,  s_254,  s_255,  s_256,  s_257,  s_258,  s_259,
  s_260,  s_261,  s_262,  s_263,  s_264,  s_265,  s_266,  s_267,  s_268,  s_269,
  s_270,  s_271,  s_272,  s_273,  s_274,  s_275,  s_276,  s_277,  s_278,  s_279,
  s_280,  s_281,  s_282,  s_283,  s_284,  s_285,  s_286,  s_287,  s_288,  s_289,
  s_290,  s_291,  s_292,  s_293,  s_294,  s_295,  s_296,  s_297,  s_298,  s_299,
  s_300,  s_301,  s_302,  s_303,  s_304,  s_305,  s_306,  s_307,  s_308,  s_309,
  s_310,  s_311,  s_312,  s_313,  s_314,  s_315,  s_316,  s_317,  s_318,  s_319,
  s_320,  s_321,  s_322,  s_323,  s_324,  s_325,  s_326,  s_327,  s_328,  s_329,
  s_330,  s_331,  s_332,  s_333,  s_334,  s_335,  s_336,  s_337,  s_338,  s_339,
  s_340,  s_341,  s_342,  s_343,  s_344,  s_345,  s_346,  s_347,  s_348,  s_349,
  s_350,  s_351,  s_352,  s_353,  s_354,  s_355,  s_356,  s_357,  s_358,  s_359,
  s_360,  s_361,  s_362,  s_363,  s_364,  s_365,  s_366,  s_367,  s_368,  s_369,
  s_370,  s_371,  s_372,  s_373,  s_374,  s_375,  s_376,  s_377,  s_378,  s_379,
  s_380,  s_381,  s_382,  s_383,  s_384,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "_EOF_"),
    SMapVal(256, "_error_"),

    SMapVal(258, "KW_AUTO"),
    SMapVal(259, "KW_DOUBLE"),
    SMapVal(260, "KW_INT"),
    SMapVal(261, "KW_STRUCT"),
    SMapVal(262, "KW_BREAK"),
    SMapVal(263, "KW_ELSE"),
    SMapVal(264, "KW_LONG"),
    SMapVal(265, "KW_SWITCH"),
    SMapVal(266, "KW_CASE"),
    SMapVal(267, "KW_ENUM"),
    SMapVal(268, "KW_REGISTER"),
    SMapVal(269, "KW_TYPEDEF"),
    SMapVal(270, "KW_CHAR"),
    SMapVal(271, "KW_EXTERN"),
    SMapVal(272, "KW_RETURN"),
    SMapVal(273, "KW_UNION"),
    SMapVal(274, "KW_CONST"),
    SMapVal(275, "KW_FLOAT"),
    SMapVal(276, "KW_SHORT"),
    SMapVal(277, "KW_UNSIGNED"),
    SMapVal(278, "KW_CONTINUE"),
    SMapVal(279, "KW_FOR"),
    SMapVal(280, "KW_SIGNED"),
    SMapVal(281, "KW_VOID"),
    SMapVal(282, "KW_DEFAULT"),
    SMapVal(283, "KW_GOTO"),
    SMapVal(284, "KW_SIZEOF"),
    SMapVal(285, "KW_VOLATILE"),
    SMapVal(286, "KW_DO"),
    SMapVal(287, "KW_IF"),
    SMapVal(288, "KW_STATIC"),
    SMapVal(289, "KW_WHILE"),
    SMapVal(290, "IDENTIFIER"),
    SMapVal(291, "FLOATCONSTANT"),
    SMapVal(292, "DECCONSTANT"),
    SMapVal(293, "OCTCONSTANT"),
    SMapVal(294, "HEXCONSTANT"),
    SMapVal(295, "CHARCONSTANT"),
    SMapVal(296, "WCHARCONSTANT"),
    SMapVal(297, "STRINGLITERAL"),
    SMapVal(298, "WSTRINGLITERAL"),
    SMapVal(299, "LSQUBRACKET"),
    SMapVal(300, "RSQUBRACKET"),
    SMapVal(301, "LBRACKET"),
    SMapVal(302, "RBRACKET"),
    SMapVal(303, "LBRACE"),
    SMapVal(304, "RBRACE"),
    SMapVal(305, "ASTERISK"),
    SMapVal(306, "COMMA"),
    SMapVal(307, "COLON"),
    SMapVal(308, "EQUALS"),
    SMapVal(309, "SCOLON"),
    SMapVal(310, "OPERATOR_DOT"),
    SMapVal(311, "OPERATOR_PTR"),
    SMapVal(312, "OPERATOR_INCR"),
    SMapVal(313, "OPERATOR_DECR"),
    SMapVal(314, "OPERATOR_BITAND"),
    SMapVal(315, "OPERATOR_PLUS"),
    SMapVal(316, "OPERATOR_MINUS"),
    SMapVal(317, "OPERATOR_BITNEG"),
    SMapVal(318, "OPERATOR_BOOLNEG"),
    SMapVal(319, "OPERATOR_DIV"),
    SMapVal(320, "OPERATOR_MOD"),
    SMapVal(321, "OPERATOR_BSL"),
    SMapVal(322, "OPERATOR_BSR"),
    SMapVal(323, "OPERATOR_LT"),
    SMapVal(324, "OPERATOR_GT"),
    SMapVal(325, "OPERATOR_LTEQU"),
    SMapVal(326, "OPERATOR_GTEQU"),
    SMapVal(327, "OPERATOR_EQUALITY"),
    SMapVal(328, "OPERATOR_NEQU"),
    SMapVal(329, "OPERATOR_BITXOR"),
    SMapVal(330, "OPERATOR_BITOR"),
    SMapVal(331, "OPERATOR_BOOLAND"),
    SMapVal(332, "OPERATOR_BOOLOR"),
    SMapVal(333, "OPERATOR_TERNARY"),
    SMapVal(334, "OPERATOR_MULTEQU"),
    SMapVal(335, "OPERATOR_DIVEQU"),
    SMapVal(336, "OPERATOR_MODEQU"),
    SMapVal(337, "OPERATOR_PLUSEQU"),
    SMapVal(338, "OPERATOR_MINUSEQU"),
    SMapVal(339, "OPERATOR_BSLEQU"),
    SMapVal(340, "OPERATOR_BSREQU"),
    SMapVal(341, "OPERATOR_ANDEQU"),
    SMapVal(342, "OPERATOR_XOREQU"),
    SMapVal(343, "OPERATOR_OREQU"),
    SMapVal(344, "PUNCTUATOR_TRIPLEDOT"),
    SMapVal(345, "keyword"),
    SMapVal(346, "constant"),
    SMapVal(347, "floating_constant"),
    SMapVal(348, "integer_constant"),
    SMapVal(349, "enumeration_constant"),
    SMapVal(350, "character_constant"),
    SMapVal(351, "string_literal"),
    SMapVal(352, "primary_expr"),
    SMapVal(353, "expr"),
    SMapVal(354, "postfix_expr"),
    SMapVal(355, "arg_expr_list"),
    SMapVal(356, "assignment_expr"),
    SMapVal(357, "unary_expr"),
    SMapVal(358, "unary_operation"),
    SMapVal(359, "cast_expr"),
    SMapVal(360, "type_name"),
    SMapVal(361, "multiplicative_expr"),
    SMapVal(362, "additive_expr"),
    SMapVal(363, "shift_expr"),
    SMapVal(364, "relational_expr"),
    SMapVal(365, "equality_expr"),
    SMapVal(366, "and_expr"),
    SMapVal(367, "xor_expr"),
    SMapVal(368, "or_expr"),
    SMapVal(369, "logical_and_expr"),
    SMapVal(370, "logical_or_expr"),
    SMapVal(371, "conditional_expr"),
    SMapVal(372, "assignment_operator"),
    SMapVal(373, "constant_expr"),
    SMapVal(374, "declaration"),
    SMapVal(375, "declaration_specifiers"),
    SMapVal(376, "initialiser_declarator_list"),
    SMapVal(377, "storage_class_specifier"),
    SMapVal(378, "type_specifier"),
    SMapVal(379, "type_qualifier"),
    SMapVal(380, "initialiser_declarator"),
    SMapVal(381, "initialiser"),
    SMapVal(382, "struct_union_specifier"),
    SMapVal(383, "enum_specifier"),
    SMapVal(384, "typedef_name"),
    SMapVal(385, "struct_union"),
    SMapVal(386, "struct_declaration_list"),
    SMapVal(387, "struct_declaration"),
    SMapVal(388, "spec_qualifier_list"),
    SMapVal(389, "struct_declarator_list"),
    SMapVal(390, "struct_declarator"),
    SMapVal(391, "declarator"),
    SMapVal(392, "enumerator_list"),
    SMapVal(393, "enumerator"),
    SMapVal(394, "direct_declarator"),
    SMapVal(395, "pointer"),
    SMapVal(396, "param_type_list"),
    SMapVal(397, "identifier_list"),
    SMapVal(398, "type_qualifier_list"),
    SMapVal(399, "param_list"),
    SMapVal(400, "param_declaration"),
    SMapVal(401, "abstract_declarator"),
    SMapVal(402, "direct_abstract_declarator"),
    SMapVal(403, "initialiser_list"),
    SMapVal(404, "stmt"),
    SMapVal(405, "labeled_stmt"),
    SMapVal(406, "compound_stmt"),
    SMapVal(407, "expr_stmt"),
    SMapVal(408, "select_stmt"),
    SMapVal(409, "iter_stmt"),
    SMapVal(410, "jump_stmt"),
    SMapVal(411, "declaration_list"),
    SMapVal(412, "stmt_list"),
    SMapVal(413, "translation_unit"),
    SMapVal(414, "external_declaration"),
    SMapVal(415, "function_definition"),
    SMapVal(416, "translation_unit_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(true),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}

// $insert debugfunctions

std::ostringstream ParserBase::s_out__;

std::ostream &ParserBase::dflush__(std::ostream &out)
{
    std::ostringstream &s_out__ = dynamic_cast<std::ostringstream &>(out);

    std::cout << "    " << s_out__.str() << std::flush;
    s_out__.clear();
    s_out__.str("");
    return out;
}

std::string ParserBase::stype__(char const *pre, STYPE__ const &semVal, char const *post) const
{
    return "";
}
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << "`" << it->second << "'";
    else if (isprint(value))
        ostr << "`" << static_cast<char>(value) << "' (" << value << ")";
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << "'";
    return ostr.str();
}


void Parser::print__()
{
// $insert print
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
        // $insert LTYPEresize
        d_locationStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert LTYPEpush
    *(d_lsp__ = &d_locationStack__[d_stackIdx__]) = d_loc__;
    // $insert debug
    if (d_debug__)
        s_out__ <<   "push(state " << state << stype__(", semantic TOS = ", d_val__, ")") << ')' << "\n" << dflush__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(" << count << ") from stack having size " << (d_stackIdx__ + 1) << "\n" << dflush__;
    if (d_stackIdx__ < static_cast<int>(count))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "Terminating parse(): unrecoverable input error at token " << symbol__(d_token__) << "\n" << dflush__;
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert LTYPEpop
    d_lsp__ = &d_locationStack__[d_stackIdx__];
    // $insert debug
    if (d_debug__)
        s_out__ <<  "pop(): next state: " << d_state__ << ", token: " << symbol__(d_token__) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  stype__("semantic: ", d_val__) << "\n" << dflush__;
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    // $insert debug
    if (d_debug__)
        s_out__ <<  "executeAction(): of rule " << production ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic [TOS]: ", d_val__) << " ..." << "\n" << dflush__;
    switch (production)
    {
        // $insert actioncases
        
    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "... action of rule " << production << " completed" ;
    // $insert debug
    if (d_debug__)
        s_out__ <<   stype__(", semantic: ", d_val__) << "\n" << dflush__;
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

    // $insert debug
    if (d_debug__)
        s_out__ <<  "reduce(): by rule " << (&pi - s_productionInfo) ;
    // $insert debug
    if (d_debug__)
        s_out__ <<  " to N-terminal " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
        // $insert debug
        if (d_debug__)
            s_out__ <<  "nextToken(): popped " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
    // $insert debug
    if (d_debug__)
        s_out__ <<  "nextToken(): using " << symbol__(d_token__) << stype__(", semantic = ", d_val__) << "\n" << dflush__;
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
    // $insert threading
    SR__ *sr = s_state[d_state__];        // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;        // sentinel-index in the SR__ array

    SR__ *lastElementPtr = sr + lastIdx;
    SR__ *elementPtr = sr + 1;            // start the search at s_xx[1]

    lastElementPtr->d_token = d_token__;// set search-token

    while (elementPtr->d_token != d_token__)
        ++elementPtr;

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "): default reduction by rule " << -elementPtr->d_action << "\n" << dflush__;
            return elementPtr->d_action;                
        }
        // $insert debug
        if (d_debug__)
            s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__) << "): Not " ;
        // $insert debug
        if (d_debug__)
            s_out__ <<  "found. " << (recovery ? "Continue" : "Start") << " error recovery."  << "\n" << dflush__;

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;

// $insert debuglookup
    if (d_debug__)
    {
        s_out__ <<  "lookup(" << d_state__ << ", " << symbol__(d_token__);

        if (action < 0)             // a reduction is found
            s_out__ << "): reduce by rule " << -action;
        else if (action == 0)
            s_out__ <<  "): ACCEPT";
        else 
            s_out__ <<  "): shift " << action << " (" << symbol__(d_token__) << 
                        " processed)";

        s_out__ << "\n" << dflush__;
    }

    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }

    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): " << d_nErrors__ << " error(s) so far. State = " << top__() << "\n" << dflush__;

    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "errorRecovery(): pop state " << top__() << "\n" << dflush__;
        pop__();
    }
    // $insert debug
    if (d_debug__)
        s_out__ <<  "errorRecovery(): state " << top__() << " is an ERROR state" << "\n" << dflush__;

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() SHIFT state " << action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", continue with " << symbol__(d_token__) << "\n" << dflush__;

                if (gotToken)
                {
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  "errorRecovery() COMPLETED: next state " ;
                    // $insert debug
                    if (d_debug__)
                        s_out__ <<  action << ", no token yet" << "\n" << dflush__;

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
                // $insert debug
                if (d_debug__)
                    s_out__ <<  "errorRecovery() REDUCE by rule " << -action ;
                // $insert debug
                if (d_debug__)
                    s_out__ <<  ", token = " << symbol__(d_token__) << "\n" << dflush__;
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): Parsing starts" << "\n" << dflush__;
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        // $insert debug
        if (d_debug__)
            s_out__ <<  "==" << "\n" << dflush__;
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    // $insert debug
    if (d_debug__)
        s_out__ <<  "parse(): returns " << retValue << "\n" << dflush__;
    return retValue;
}

// $insert polymorphicImpl
namespace Meta__
{
   Base::~Base()
   {}
}




