//
//  declarations.gr
//  CARM-Compiler
//
//  Created by Ollie Ford on 01/03/2015.
//  Copyright (c) 2015 OJFord. All rights reserved.
//

declaration:
	declaration_specifiers initialiser_declarator_list_opt SCOLON
;

initialiser_declarator_list_opt:
	initialiser_declarator_list
|
	epsilon
;

declaration_specifiers:
	storage_class_specifier declaration_specifiers_opt
|
	type_specifier declaration_specifiers_opt
|
	type_qualifier declaration_specifiers_opt

;

declaration_specifiers_opt:
	declaration_specifiers
|
	epsilon
;

initialiser_declarator_list:
	initialiser_declarator
|
	initialiser_declarator_list COMMA initialiser_declarator
;

initialiser_declarator:
	declaration
|
	declaration EQUALS initialiser
;

storage_class_specifier:
	KW_TYPEDEF
|
	KW_EXTERN
|
	KW_STATIC
|
	KW_AUTO
|
	KW_REGISTER
;

type_specifier:
	KW_VOID
|
	KW_CHAR
|
	KW_SHORT
|
	KW_INT
|
	KW_LONG
|
	KW_FLOAT
|
	KW_DOUBLE
|
	KW_SIGNED
|
	KW_UNSIGNED
|
	struct_union_specifier
|
	enum_specifier
|
	typedef_name												%prec TYPEDEF_IDENT
;

struct_union_specifier:
	struct_union LBRACE struct_declaration_list RBRACE
|
	struct_union identifier_opt LBRACE struct_declaration_list RBRACE
|
	struct_union IDENTIFIER
;

identifier_opt:
	IDENTIFIER
|
	epsilon
;

struct_union:
	KW_STRUCT
|
	KW_UNION
;

struct_declaration_list:
	struct_declaration
|
	struct_declaration_list struct_declaration
;

struct_declaration:
	spec_qualifier_list struct_declarator_list SCOLON
;

spec_qualifier_list:
	type_specifier spec_qualifier_list_opt
|
	type_qualifier spec_qualifier_list_opt
;

spec_qualifier_list_opt:
	spec_qualifier_list
|
	epsilon
;

struct_declarator_list:
	struct_declarator
|
	struct_declarator_list COMMA struct_declarator
;

struct_declarator:
	declarator
|
	declarator_opt COLON constant_expr
;

declarator_opt:
	declarator
|
	epsilon
;

enum_specifier:
	KW_ENUM identifier_opt LBRACE enumerator_list RBRACE
|
	KW_ENUM IDENTIFIER
;

enumerator_list:
	enumerator
|
	enumerator_list COMMA enumerator
;

enumerator:
	enumeration_constant
|
	enumeration_constant EQUALS constant_expr
;

type_qualifier:
	KW_CONST
|
	KW_VOLATILE
;

declarator:
	pointer_opt direct_declarator
;

pointer_opt:
	pointer
|
	epsilon
;

direct_declarator:
	IDENTIFIER													%prec DECL_IDENT
|
	LBRACKET declarator RBRACKET
|
	direct_declarator LSQUBRACKET constant_expr_opt RSQUBRACKET
|
	direct_declarator LBRACKET param_type_list_opt RBRACKET
|
	direct_declarator LBRACKET identifier_list RBRACKET
;

constant_expr_opt:
	constant_expr
|
	epsilon
;

param_type_list_opt:
	param_type_list
|
	epsilon
;

pointer:
	OPERATOR_MULT type_qualifier_list_opt pointer_opt
;

type_qualifier_list_opt:
	type_qualifier_list
|
	epsilon
;

type_qualifier_list:
	type_qualifier
|
	type_qualifier_list type_qualifier
;

param_type_list:
	param_list
|
	param_list COMMA PUNCTUATOR_TRIPLEDOT
;

param_list:
	param_declaration
|
	param_list COMMA param_declaration
;

param_declaration:
	declaration_specifiers declarator_opt
|
	declaration_specifiers
|
	declaration_specifiers abstract_declarator
;

identifier_list:
	IDENTIFIER
|
	identifier_list COMMA IDENTIFIER
;

type_name:
	spec_qualifier_list
|
	spec_qualifier_list abstract_declarator
;

abstract_declarator:
	pointer
|
	pointer_opt direct_abstract_declarator
;

direct_abstract_declarator:
	LBRACKET abstract_declarator_opt RBRACKET
|
	direct_abstract_declarator LSQUBRACKET constant_expr_opt RSQUBRACKET
|
	direct_abstract_declarator_opt LSQUBRACKET constant_expr RSQUBRACKET
|
	direct_abstract_declarator_opt LBRACKET param_type_list RBRACKET
;

abstract_declarator_opt:
	abstract_declarator
|
	epsilon
;

direct_abstract_declarator_opt:
	direct_abstract_declarator
|
	epsilon
;

typedef_name:
	IDENTIFIER
;

initialiser:
	assignment_expr
|
	LBRACE initialiser_list comma_opt RBRACE
;

comma_opt:
	COMMA
|
	epsilon
;

initialiser_list:
	initialiser
|
	initialiser_list COMMA initialiser
;
